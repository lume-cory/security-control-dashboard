import { useState } from "react"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Button } from "@/subframe/components/Button"
import { Badge } from "@/subframe/components/Badge"
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetFooter } from "@/components/ui/sheet"
import { vulnerabilities, type Vulnerability } from "../data/vulnerability-data"
import { VulnerabilityDetails } from "./VulnerabilityDetails"
import { generateAISummary } from './VulnerabilityDetails'
import { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { type VulnerabilityStatus } from "../data/vulnerability-data"

export function VulnerabilitySection() {
    const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null)
    const [statusFilters, setStatusFilters] = useState<VulnerabilityStatus[]>([
        'OPEN', 'IN_REVIEW', 'IN_PROGRESS', 'NOT_APPLICABLE', 'FIXED', 'ACCEPTED_RISK'
    ])

    const getStatusBadgeVariant = (status: string) => {
        switch (status) {
            case 'OPEN':
                return 'error'
            case 'IN_REVIEW':
                return 'warning'
            case 'IN_PROGRESS':
                return 'brand'
            case 'NOT_APPLICABLE':
                return 'neutral'
            case 'FIXED':
                return 'success'
            case 'ACCEPTED_RISK':
                return 'brand'
            default:
                return 'neutral'
        }
    }

    const getSeverityBadgeVariant = (severity: string) => {
        switch (severity) {
            case 'CRITICAL':
                return 'error'
            case 'HIGH':
                return 'error'
            case 'MEDIUM':
                return 'warning'
            case 'LOW':
                return 'success'
            default:
                return 'neutral'
        }
    }

    // Filter vulnerabilities based on selected statuses
    const filteredVulnerabilitiesByTeam = vulnerabilities
        .filter(vuln => statusFilters.includes(vuln.status))
        .reduce((acc, vuln) => {
            const team = vuln.teamOwner;
            if (!acc[team]) {
                acc[team] = [];
            }
            acc[team].push(vuln);
            return acc;
        }, {} as Record<string, Vulnerability[]>);

    return (
        <Card className="w-full">
            <CardHeader>
                <div className="flex w-full items-center justify-between">
                    <h2 className="text-lg font-semibold">Vulnerability Assessment</h2>
                    <div className="flex items-center gap-2">
                        <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                                <Button
                                    variant="brand-secondary"
                                    icon="FeatherFilter"
                                >
                                    {`Filter Status (${statusFilters.length})`}
                                </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent 
                                align="end" 
                                className="w-48"
                                onCloseAutoFocus={(e) => e.preventDefault()}
                            >
                                {(['OPEN', 'IN_REVIEW', 'IN_PROGRESS', 'NOT_APPLICABLE', 'FIXED', 'ACCEPTED_RISK'] as const).map(status => (
                                    <DropdownMenuCheckboxItem
                                        key={status}
                                        checked={statusFilters.includes(status)}
                                        onCheckedChange={(checked: boolean) => {
                                            setStatusFilters(prev => 
                                                checked 
                                                    ? [...prev, status]
                                                    : prev.filter(s => s !== status)
                                            )
                                        }}
                                        onSelect={(e) => e.preventDefault()}
                                    >
                                        {status.replace('_', ' ')}
                                    </DropdownMenuCheckboxItem>
                                ))}
                            </DropdownMenuContent>
                        </DropdownMenu>
                        <Button
                            variant="brand-primary"
                            icon="FeatherRefreshCw"
                            onClick={() => {}}
                        >
                            Refresh Scans
                        </Button>
                    </div>
                </div>
            </CardHeader>
            <CardContent className="space-y-8">
                {Object.entries(filteredVulnerabilitiesByTeam).map(([team, teamVulns]) => (
                    <div key={team} className="space-y-4">
                        <h3 className="text-lg font-semibold">
                            {team.charAt(0) + team.slice(1).toLowerCase()} team vulnerabilities
                        </h3>
                        <div className="grid grid-cols-2 gap-4">
                            {teamVulns.map(vulnerability => (
                                <Card 
                                    key={vulnerability.id} 
                                    className="hover:shadow-md transition-shadow cursor-pointer"
                                    onClick={() => setSelectedVulnerability(vulnerability)}
                                >
                                    <CardContent className="pt-6">
                                        <div className="flex items-center justify-between mb-2">
                                            <div className="flex items-center gap-2">
                                                <h4 className="font-semibold">{vulnerability.title}</h4>
                                                {/* <span className="inline-flex font-base items-center gap-1 px-2 py-1 rounded-full text-xs bg-gray-100">
                                                    <div className={`w-2 h-2 rounded-full ${
                                                        vulnerability.severity === 'CRITICAL' ? 'bg-red-500' :
                                                        vulnerability.severity === 'HIGH' ? 'bg-orange-500' :
                                                        vulnerability.severity === 'MEDIUM' ? 'bg-yellow-500' :
                                                        'bg-green-500'
                                                    }`} />
                                                    {vulnerability.severity}
                                                </span> */}
                                            </div>
                                            <span className="inline-flex font-base items-center gap-1 px-2 py-1 rounded-full text-xs bg-gray-100">
                                                <div className={`w-2 h-2 rounded-full ${
                                                    vulnerability.status === 'OPEN' ? 'bg-red-500' :
                                                    vulnerability.status === 'IN_REVIEW' ? 'bg-yellow-500' :
                                                    vulnerability.status === 'NOT_APPLICABLE' ? 'bg-gray-500' :
                                                    vulnerability.status === 'FIXED' ? 'bg-green-500' :
                                                    'bg-blue-500'
                                                }`} />
                                                {vulnerability.status.replace('_', ' ')}
                                            </span>
                                        </div>
                                        <p className="text-sm text-muted-foreground mb-4 flex-grow">
                                            {generateAISummary(vulnerability)}
                                        </p>
                                        <div className="grid grid-cols-3 gap-4">
                                            <div className="col-span-1">
                                                <h4 className="text-sm font-medium mb-2">Affected Component</h4>
                                                <div className="text-sm text-muted-foreground">
                                                    {vulnerability.affectedComponent} ({vulnerability.affectedVersion})
                                                </div>
                                            </div>
                                            
                                            <div className="col-span-1">
                                                <h4 className="text-sm font-medium mb-2">Source Tools</h4>
                                                <div className="flex flex-wrap gap-2">
                                                    {vulnerability.toolOutputs.map(tool => (
                                                        <Badge key={tool.toolName} variant="neutral">
                                                            {tool.toolName}
                                                        </Badge>
                                                    ))}
                                                </div>
                                            </div>
                                            
                                            <div className="col-span-1">
                                                <h4 className="text-sm font-medium mb-2">Compliance Policies</h4>
                                                <div className="flex flex-wrap gap-2">
                                                    {vulnerability.impactedPolicies.map(policyId => (
                                                        <Badge key={policyId} variant="neutral">
                                                            {policyId}
                                                        </Badge>
                                                    ))}
                                                </div>
                                            </div>
                                        </div>
                                    </CardContent>
                                </Card>
                            ))}
                        </div>
                    </div>
                ))}
            </CardContent>

            <Sheet
                open={!!selectedVulnerability}
                onOpenChange={() => setSelectedVulnerability(null)}
            >
                <SheetContent className="flex flex-col h-full w-full sm:max-w-[800px]">
                    <SheetHeader className="border-b pb-4">
                        <SheetTitle>
                            {selectedVulnerability && (
                                <div className="flex items-center justify-between mb-2">
                                    <div className="flex items-center gap-2">
                                        <h2 className="font-semibold text-xl">{selectedVulnerability.title}</h2>
                                        <span className="inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-xs bg-gray-100 font-medium">
                                            <div className={`w-2 h-2 rounded-full ${
                                                selectedVulnerability.status === 'OPEN' ? 'bg-red-500' :
                                                selectedVulnerability.status === 'IN_REVIEW' ? 'bg-yellow-500' :
                                                selectedVulnerability.status === 'NOT_APPLICABLE' ? 'bg-gray-500' :
                                                selectedVulnerability.status === 'FIXED' ? 'bg-green-500' :
                                                'bg-blue-500'
                                            }`} />
                                            {selectedVulnerability.status.replace('_', ' ')}
                                        </span>
                                        {/* <span className="inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-xs bg-gray-100 font-normal">
                                            <div className={`w-2 h-2 rounded-full ${
                                                selectedVulnerability.severity === 'CRITICAL' ? 'bg-red-500' :
                                                selectedVulnerability.severity === 'HIGH' ? 'bg-orange-500' :
                                                selectedVulnerability.severity === 'MEDIUM' ? 'bg-yellow-500' :
                                                'bg-green-500'
                                            }`} />
                                            {selectedVulnerability.severity}
                                        </span> */}
                                    </div>
                                    {/* <div className="flex items-center gap-4">
                                        <span className="inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-xs bg-gray-100 font-normal">
                                            <div className={`w-2 h-2 rounded-full ${
                                                selectedVulnerability.status === 'OPEN' ? 'bg-red-500' :
                                                selectedVulnerability.status === 'IN_REVIEW' ? 'bg-yellow-500' :
                                                selectedVulnerability.status === 'NOT_APPLICABLE' ? 'bg-gray-500' :
                                                selectedVulnerability.status === 'FIXED' ? 'bg-green-500' :
                                                'bg-blue-500'
                                            }`} />
                                            {selectedVulnerability.status.replace('_', ' ')}
                                        </span>
                                    </div> */}
                                </div>
                            )}
                        </SheetTitle>
                    </SheetHeader>

                    <div className="flex-1 overflow-y-auto py-4">
                        {selectedVulnerability && (
                            <VulnerabilityDetails
                                vulnerability={selectedVulnerability}
                            />
                        )}
                    </div>

                    <SheetFooter className="border-t pt-4">
                        <div className="flex justify-end gap-2 w-full">
                            <Button variant="brand-secondary" onClick={() => setSelectedVulnerability(null)}>
                                Close
                            </Button>
                            <Button variant="brand-primary">Update Assessment</Button>
                        </div>
                    </SheetFooter>
                </SheetContent>
            </Sheet>
        </Card>
    )
} 