'use client'

import { useState } from 'react'
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle } from "@/components/ui/sheet"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Button } from "@/subframe/components/Button"
import { Input } from '@/components/ui/input'
import { Chat, previousChats } from '../data/chat-data'

export function ChatDrawer() {
  const [open, setOpen] = useState(false)
  const [isChatbotOpen, setIsChatbotOpen] = useState(false)
  const [selectedChat, setSelectedChat] = useState<Chat | null>(null)
  const [newMessage, setNewMessage] = useState("")

  const handleChatSelect = (chat: Chat) => {
    setSelectedChat(chat)
  }

  const handleSendMessage = () => {
    if (newMessage.trim() === "") return

    let updatedChat
    if (selectedChat) {
      updatedChat = {
        ...selectedChat,
        conversation: [
          ...selectedChat.conversation,
          { role: "user", content: newMessage },
          { role: "assistant", content: "I'm processing your request. Please wait for a moment..." } // Placeholder response
        ]
      }
    } else {
      updatedChat = {
        id: String(previousChats.length + 1),
        question: newMessage,
        title: "New Conversation",
        timestamp: new Date().toISOString().split('T')[0],
        conversation: [
          { role: "user", content: newMessage },
          { role: "assistant", content: "I'm processing your request. Please wait for a moment..." }
        ]
      }
      previousChats.unshift(updatedChat)
    }
    
    setSelectedChat(updatedChat)
    setNewMessage("")

    // Simulate AI response after a short delay
    setTimeout(() => {
      const aiResponse = "This is a simulated AI response. In a real implementation, this would be generated by an AI model based on the user's input and the conversation context."
      const finalUpdatedChat = {
        ...updatedChat,
        conversation: [
          ...updatedChat.conversation.slice(0, -1),
          { role: "assistant", content: aiResponse }
        ]
      }
      setSelectedChat(finalUpdatedChat)
      if (!selectedChat) {
        previousChats[0] = finalUpdatedChat
      }
    }, 1000)
  }


  return (
    <>
      <Button
        variant="brand-primary"
        size="large"
        icon="FeatherMessageSquare"
        className="fixed bottom-4 right-4 h-14 w-14 rounded-full shadow-lg"
        onClick={() => setIsChatbotOpen(true)}
      />

      {/* AI Chatbot Drawer */}
      <Sheet open={isChatbotOpen} onOpenChange={setIsChatbotOpen}>
        <SheetContent style={{ maxWidth: 'min(33vw, 1200px)' }} className="w-full overflow-hidden" side="right">
          <SheetHeader>
            <SheetTitle>Security Review Assistant</SheetTitle>
            <SheetDescription>Ask questions about security policies and compliance</SheetDescription>
          </SheetHeader>
          <div className="flex flex-col mt-4 h-[calc(100vh-200px)]">
            {selectedChat ? (
              <>
                <Button 
                  size="medium"
                  variant="brand-secondary" 
                  className="self-start mb-4" 
                  icon="FeatherArrowLeft"
                  onClick={() => setSelectedChat(null)}
                >
                 Back to Questions
                </Button>
                <ScrollArea className="flex-grow mb-4">
                  {selectedChat.conversation.map((message, index) => (
                    <div key={index} className={`mb-4 ${message.role === 'user' ? 'text-right' : 'text-left'}`}>
                      <div className={`inline-block p-2 rounded-lg ${message.role === 'user' ? 'bg-blue-100' : 'bg-gray-100'}`}>
                        {message.content}
                      </div>
                    </div>
                  ))}
                </ScrollArea>
              </>
            ) : (
              <ScrollArea className="flex-grow mb-4">
                <h3 className="font-semibold mb-2">Recent Questions</h3>
                {previousChats.map((chat) => (
                  <div
                    key={chat.id}
                    className="p-4 mb-3 rounded cursor-pointer hover:bg-gray-100 border border-gray-200"
                    onClick={() => handleChatSelect(chat)}
                  >
                    <div className="font-medium mb-1">{chat.title}</div>
                    <div className="text-sm text-gray-600 mb-2">{chat.question}</div>
                    <div className="text-xs text-gray-400">{chat.timestamp}</div>
                  </div>
                ))}
              </ScrollArea>
            )}
            <div className="flex">
              <Input
                value={newMessage}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewMessage(e.target.value)}
                placeholder={selectedChat ? "Type your message here..." : "Start a new thread..."}
                className="flex-grow mr-2"
                onKeyPress={(e: React.KeyboardEvent<HTMLInputElement>) => e.key === 'Enter' && handleSendMessage()}
              />
              <Button 
                variant="brand-primary"
                icon="FeatherArrowUp"
                onClick={handleSendMessage}
              >
              </Button>
            </div>
          </div>
        </SheetContent>
      </Sheet>
    </>
  )
} 