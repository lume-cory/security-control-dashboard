"use client"

import React, { useState, useMemo } from "react";
import { DefaultPageLayout } from "@/subframe/layouts/DefaultPageLayout";
import { IconWithBackground } from "@/subframe/components/IconWithBackground";
import { Breadcrumbs } from "@/subframe/components/Breadcrumbs";
import { Button } from "@/subframe/components/Button";
import { FilterBadge } from "@/subframe/components/FilterBadge";
import { Badge } from "@/subframe/components/Badge";
import { LineChart } from "@/subframe/components/LineChart";
import { DropdownMenu } from "@/subframe/components/DropdownMenu";
import * as SubframeCore from "@subframe/core";
import { Table } from "@/subframe/components/Table";
import { useRouter } from "next/navigation";
import { DialogLayout } from "@/subframe/layouts/DialogLayout";
import { IconButton } from "@/subframe/components/IconButton";
import { TextArea } from "@/subframe/components/TextArea";
// Mock data for vulnerabilities
const vulnerabilityResolutionData = [
  {
    id: 1,
    name: "SQL Injection in Login Form",
    mitigation: "Implement input validation and parameterized queries",
    timeToDetect: "2 days",
    timeToResolve: "5 days",
    riskScore: 9,
    metSLA: true,
    status: "Open",
  },
  {
    id: 2,
    name: "Outdated SSL Certificate",
    mitigation: "Renew SSL certificate and implement auto-renewal",
    timeToDetect: "1 day",
    timeToResolve: "1 day",
    riskScore: 7,
    metSLA: true,
    status: "Resolved",
  },
  {
    id: 3,
    name: "Unpatched Server Software",
    mitigation: "Apply latest security patches and implement regular patching schedule",
    timeToDetect: "5 days",
    timeToResolve: "3 days",
    riskScore: 8,
    metSLA: false,
    status: "Open",
  },
  {
    id: 4,
    name: "Weak Password Policy",
    mitigation: "Enforce strong password requirements and implement MFA",
    timeToDetect: "10 days",
    timeToResolve: "7 days",
    riskScore: 6,
    metSLA: true,
    status: "Open",
  },
  {
    id: 5,
    name: "Unsecured API Endpoint",
    mitigation: "Implement proper authentication and rate limiting",
    timeToDetect: "3 days",
    timeToResolve: "4 days",
    riskScore: 8,
    metSLA: true,
    status: "Resolved",
  },
]

const VULNERABILITY_COLORS = {
  critical: '#800000', // maroon
  high: '#FF0000',    // red
  medium: '#FFD700',  // yellow
  low: '#808080'      // gray
};

// Mock data for vulnerability trend
const trendData = [
  { month: "May", critical: 3, high: 5, medium: 4, low: 4 },
  { month: "Jun", critical: 3, high: 4, medium: 7, low: 6 },
  { month: "Jul", critical: 2, high: 6, medium: 4, low: 2 },
  { month: "Aug", critical: 2, high: 3, medium: 6, low: 5 },
  { month: "Sept", critical: 1, high: 2, medium: 5, low: 2 },
  { month: "Oct", critical: 1, high: 2, medium: 3, low: 1 },
]

// Add this type near the top of the file
type Vulnerability = typeof vulnerabilityResolutionData[0];

export default function VulnerabilityResolution() {
  const router = useRouter();

  const [isDialogOpen, setIsDialogOpen] = useState(false);

  // Add state for groupBy
  const [sortColumn, setSortColumn] = useState("riskScore");
  const [sortDirection, setSortDirection] = useState("desc");
  const [groupBy, setGroupBy] = useState<keyof Vulnerability | null>(null);

  // Update sorting logic to handle grouping
  const sortedVulnerabilities = useMemo(() => {
    let sorted = [...vulnerabilityResolutionData];
    
    // First sort by the selected column
    sorted.sort((a, b) => {
      const aVal = a[sortColumn as keyof Vulnerability];
      const bVal = b[sortColumn as keyof Vulnerability];
      if (aVal < bVal) return sortDirection === "asc" ? -1 : 1;
      if (aVal > bVal) return sortDirection === "asc" ? 1 : -1;
      return 0;
    });

    // Then group if groupBy is selected
    if (groupBy) {
      const grouped = sorted.reduce<Record<string, Vulnerability[]>>((acc, item) => {
        const key = String(item[groupBy]);
        if (!acc[key]) {
          acc[key] = [];
        }
        acc[key].push(item);
        return acc;
      }, {});

      // Flatten grouped items back into array
      sorted = Object.entries(grouped).flatMap(([_, items]) => items);
    }

    return sorted;
  }, [vulnerabilityResolutionData, sortColumn, sortDirection, groupBy]);

  const handleSort = (column: keyof Vulnerability) => {
    if (column === sortColumn) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc")
    } else {
      setSortColumn(column)
      setSortDirection("desc")
    }
  }

  const getRiskColor = (score: number) => {
    if (score >= 8) return "bg-red-500"
    if (score >= 5) return "bg-yellow-500"
    return "bg-green-500"
  }

  const getStatusColor = (status: string) => {
    return status === "Open" ? "bg-red-500" : "bg-green-500"
  }

  // Calculate summary data
  // const highCriticalVulns = vulnerabilityResolutionData.filter(v => v.riskScore >= 8 && v.status === "Open").length
  // const averageTimeToResolve = vulnerabilityResolutionData.reduce((acc, v) => acc + parseInt(v.timeToResolve), 0) / vulnerabilityResolutionData.length
  // const missedSLAsLastMonth = vulnerabilityResolutionData.filter(v => !v.metSLA).length

  return (
      <DefaultPageLayout>
        <div className="flex h-full w-full flex-col items-start gap-6 px-6 py-6">
          <div className="flex w-full items-start gap-4 mobile:flex-col mobile:items-center mobile:justify-start mobile:gap-6">
            <IconWithBackground size="medium" icon="FeatherRocket" />
            <span className="text-heading-2 font-heading-2 text-default-font mobile:text-center">
              Acme Inc
            </span>
          </div>
          <div className="flex w-full items-center justify-between">
            <Breadcrumbs>
              <Breadcrumbs.Item onClick={() => router.push('/reports')}>
                Reports
              </Breadcrumbs.Item>
              <Breadcrumbs.Divider />
              <Breadcrumbs.Item active={true}>
                Vulnerability Resolution
              </Breadcrumbs.Item>
            </Breadcrumbs>
            <div className="flex items-center gap-2">
              <Button
                disabled={false}
                variant="brand-primary"
                size="medium"
                icon="FeatherEdit"
                loading={false}
                onClick={() => setIsDialogOpen(true)}
                >
                Alter Report
              </Button>
              <Button
                disabled={false}
                variant="brand-primary"
                size="medium"
                icon="FeatherDownload"
                loading={false}
                onClick={(event: React.MouseEvent<HTMLButtonElement>) => {}}
              >
                Download Report
              </Button>
            </div>
          </div>
          <div className="flex w-full flex-wrap items-start gap-4">
            <div className="flex flex-col items-start gap-4 rounded-md border border-solid border-neutral-border bg-default-background px-4 py-4 shadow-sm">
              <span className="line-clamp-1 w-full text-caption-bold font-caption-bold text-subtext-color">
                Outstanding vulnerabilities
              </span>
              <div className="flex items-center gap-2">
                <FilterBadge label="Critical" count="1" selected={false} />
                <Badge variant="error" icon="FeatherArrowUp">
                  13%
                </Badge>
              </div>
              <div className="flex items-center gap-2">
                <FilterBadge label="High" count="2" selected={false} />
                <Badge variant="success" icon="FeatherArrowDown">
                  5%
                </Badge>
              </div>
              <div className="flex items-center gap-2">
                <FilterBadge label="Medium" count="3" selected={false} />
                <Badge variant="neutral" icon="FeatherArrowRight">
                  0%
                </Badge>
              </div>
              <div className="flex items-center gap-2">
                <FilterBadge label="Low" count="1" selected={false} />
                <Badge variant="success" icon="FeatherArrowDown">
                  25%
                </Badge>
              </div>
            </div>
            <div className="flex grow shrink-0 basis-0 flex-col flex-wrap items-start gap-4">
              <div className="flex w-full flex-wrap items-start gap-4">
                <div className="flex grow shrink-0 basis-0 flex-col items-start gap-4 rounded-md border border-solid border-neutral-border bg-default-background px-4 py-4 shadow-sm">
                  <span className="line-clamp-1 w-full text-caption-bold font-caption-bold text-subtext-color">
                    Average time to detect (past-30 days)
                  </span>
                  <div className="flex w-full flex-col items-start gap-2">
                    <span className="text-heading-2 font-heading-2 text-default-font">
                      4.0 days
                    </span>
                    <Badge variant="success" icon="FeatherArrowUp">
                      25%
                    </Badge>
                  </div>
                </div>
                <div className="flex grow shrink-0 basis-0 flex-col items-start gap-4 rounded-md border border-solid border-neutral-border bg-default-background px-4 py-4 shadow-sm">
                  <span className="line-clamp-1 w-full text-caption-bold font-caption-bold text-subtext-color">
                    Missed SLAs (past-30 days)
                  </span>
                  <div className="flex w-full flex-col items-start gap-2">
                    <span className="text-heading-2 font-heading-2 text-default-font">
                      1
                    </span>
                    <Badge variant="success" icon="FeatherArrowDown">
                      33%
                    </Badge>
                  </div>
                </div>
              </div>
              <div className="flex w-full flex-wrap items-start gap-4">
                <div className="flex grow shrink-0 basis-0 flex-col items-start gap-4 rounded-md border border-solid border-neutral-border bg-default-background px-4 py-4 shadow-sm">
                  <span className="line-clamp-1 w-full text-caption-bold font-caption-bold text-subtext-color">
                    Average time to resolve (past-30 days)
                  </span>
                  <div className="flex w-full flex-col items-start gap-2">
                    <span className="text-heading-2 font-heading-2 text-default-font">
                      4.4 days
                    </span>
                    <Badge variant="success" icon="FeatherArrowUp">
                      25%
                    </Badge>
                  </div>
                </div>
                <div className="flex grow shrink-0 basis-0 flex-col items-start gap-4 rounded-md border border-solid border-neutral-border bg-default-background px-4 py-4 shadow-sm">
                  <span className="line-clamp-1 w-full text-caption-bold font-caption-bold text-subtext-color">
                    Missed SLAs (past-week)
                  </span>
                  <div className="flex w-full flex-col items-start gap-2">
                    <span className="text-heading-2 font-heading-2 text-default-font">
                      1
                    </span>
                    <Badge variant="success" icon="FeatherArrowDown">
                      33%
                    </Badge>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <LineChart
            categories={["critical","high", "medium", "low"]}
            data={trendData}
            index={"month"}
            colors={[
              VULNERABILITY_COLORS.critical,
              VULNERABILITY_COLORS.high,
              VULNERABILITY_COLORS.medium,
              VULNERABILITY_COLORS.low
            ]}
          />
          <div className="flex w-full flex-col items-start gap-6 rounded-md border border-solid border-neutral-border bg-default-background px-6 py-6 shadow-sm">
            <div className="flex w-full items-center gap-2">
              <span className="grow shrink-0 basis-0 text-heading-3 font-heading-3 text-default-font">
                Vulnerabilities
              </span>
              <SubframeCore.DropdownMenu.Root>
                <SubframeCore.DropdownMenu.Trigger asChild={true}>
                  <Button
                    variant="neutral-secondary"
                    icon={null}
                    iconRight="FeatherChevronDown"
                    onClick={(event: React.MouseEvent<HTMLButtonElement>) => {}}
                  >
                    Group by
                  </Button>
                </SubframeCore.DropdownMenu.Trigger>
                <SubframeCore.DropdownMenu.Portal>
                  <SubframeCore.DropdownMenu.Content
                    side="bottom"
                    align="end"
                    sideOffset={4}
                    asChild={true}
                  >
                    <DropdownMenu>
                      <DropdownMenu.DropdownItem 
                        icon={null}
                        onClick={() => setGroupBy('status')}
                      >
                        Status
                      </DropdownMenu.DropdownItem>
                      <DropdownMenu.DropdownItem 
                        icon={null}
                        onClick={() => setGroupBy('timeToDetect')}
                      >
                        Time to Detect
                      </DropdownMenu.DropdownItem>
                      <DropdownMenu.DropdownItem 
                        icon={null}
                        onClick={() => setGroupBy('timeToResolve')}
                      >
                        Time to Resolve
                      </DropdownMenu.DropdownItem>
                      <DropdownMenu.DropdownItem 
                        icon={null}
                        onClick={() => setGroupBy('metSLA')}
                      >
                        SLA Met
                      </DropdownMenu.DropdownItem>
                      <DropdownMenu.DropdownItem 
                        icon={null}
                        onClick={() => setGroupBy('riskScore')}
                      >
                        Risk Score
                      </DropdownMenu.DropdownItem>
                      <DropdownMenu.DropdownItem 
                        icon={null}
                        onClick={() => setGroupBy(null)}
                      >
                        Clear Grouping
                      </DropdownMenu.DropdownItem>
                    </DropdownMenu>
                  </SubframeCore.DropdownMenu.Content>
                </SubframeCore.DropdownMenu.Portal>
              </SubframeCore.DropdownMenu.Root>
            </div>
            <div className="flex w-full flex-col items-start gap-6 overflow-hidden overflow-auto">
              <Table
                header={
                  <Table.HeaderRow>
                    <Table.HeaderCell>Vulnerability</Table.HeaderCell>
                    <Table.HeaderCell>Mitigation</Table.HeaderCell>
                    <Table.HeaderCell>Time to Detect</Table.HeaderCell>
                    <Table.HeaderCell>Time to Resolve</Table.HeaderCell>
                    <Table.HeaderCell>Risk Score</Table.HeaderCell>
                    <Table.HeaderCell>SLA Met</Table.HeaderCell>
                    <Table.HeaderCell>Status</Table.HeaderCell>
                  </Table.HeaderRow>
                }
              >
                {sortedVulnerabilities.map((vuln) => (
                  <Table.Row key={vuln.id}>
                    <Table.Cell>
                      <span className="text-body-bold font-body-bold text-neutral-700">
                        {vuln.name}
                      </span>
                    </Table.Cell>
                    <Table.Cell>
                      <span className="text-body font-body text-neutral-500">
                        {vuln.mitigation}
                      </span>
                    </Table.Cell>
                    <Table.Cell>
                      <span className="text-body font-body text-neutral-500">
                        {vuln.timeToDetect}
                      </span>
                    </Table.Cell>
                    <Table.Cell>
                      <span className="text-body font-body text-neutral-500">
                        {vuln.timeToResolve}
                      </span>
                    </Table.Cell>
                    <Table.Cell>
                      <span className="text-body font-body text-neutral-500">
                        {vuln.riskScore}
                      </span>
                    </Table.Cell>
                    <Table.Cell>
                      <span className="text-body font-body text-neutral-500">
                        {vuln.metSLA ? 'Yes' : 'No'}
                      </span>
                    </Table.Cell>
                    <Table.Cell>
                      <Badge>{vuln.status}</Badge>
                    </Table.Cell>
                  </Table.Row>
                ))}
              </Table>
            </div>
            <div className="flex w-full items-center justify-center gap-4">
              <span className="grow shrink-0 basis-0 text-body font-body text-subtext-color">
                Showing 1 – 5 of 8
              </span>
              <div className="flex items-center justify-center gap-2">
                <Button
                  variant="neutral-secondary"
                  size="medium"
                  icon={null}
                  onClick={(event: React.MouseEvent<HTMLButtonElement>) => {}}
                >
                  Prev
                </Button>
                <Button
                  variant="neutral-secondary"
                  size="medium"
                  iconRight={null}
                  onClick={(event: React.MouseEvent<HTMLButtonElement>) => {}}
                >
                  Next
                </Button>
              </div>
            </div>
          </div>
        </div>
        <DialogLayout open={isDialogOpen} onOpenChange={setIsDialogOpen}>
                <div className="flex h-full w-full flex-col items-start bg-default-background">
            <div className="flex w-full flex-col items-start px-6 py-6">
              <div className="flex w-full flex-wrap items-center justify-between">
                <IconButton
                  icon="FeatherX"
                  onClick={() => setIsDialogOpen(false)}
                />
              </div>
              <div className="flex w-full flex-col items-start gap-8 px-4 py-4">
                <div className="flex w-full items-center justify-between">
                  <div className="flex flex-col items-start gap-2">
                    <span className="text-heading-2 font-heading-2 text-default-font">
                      Create New Version of Report
                    </span>
                    <span className="text-heading-3 font-heading-3 text-default-font">
                      Vulnerability Resolution
                    </span>
                    <span className="text-body font-body text-default-font">
                      Customize the report to suit your needs. Fill out the fields below
                      and click Generate.
                    </span>
                  </div>
                </div>
                <div className="flex w-full items-center gap-2">
                  <div className="flex grow shrink-0 basis-0 flex-col items-start gap-2">
                    <span className="text-heading-3 font-heading-3 text-default-font">
                      Audience
                    </span>
                    <SubframeCore.DropdownMenu.Root>
                      <SubframeCore.DropdownMenu.Trigger asChild={true}>
                        <Button
                          variant="neutral-secondary"
                          iconRight="FeatherChevronDown"
                          onClick={(event: React.MouseEvent<HTMLButtonElement>) => {}}
                        >
                          Select an Audience
                        </Button>
                      </SubframeCore.DropdownMenu.Trigger>
                      <SubframeCore.DropdownMenu.Portal>
                        <SubframeCore.DropdownMenu.Content
                          side="bottom"
                          align="start"
                          sideOffset={4}
                          asChild={true}
                        >
                          <DropdownMenu>
                            <DropdownMenu.DropdownItem icon={null}>
                              Board of Directors
                            </DropdownMenu.DropdownItem>
                            <DropdownMenu.DropdownItem icon={null}>
                              Regulator
                            </DropdownMenu.DropdownItem>
                            <DropdownMenu.DropdownItem icon={null}>
                              Audit
                            </DropdownMenu.DropdownItem>
                            <DropdownMenu.DropdownItem icon={null}>
                              Company Leadership
                            </DropdownMenu.DropdownItem>
                            <DropdownMenu.DropdownItem icon={null}>
                              Security Team
                            </DropdownMenu.DropdownItem>
                            <DropdownMenu.DropdownItem icon={null}>
                              Development Team
                            </DropdownMenu.DropdownItem>
                          </DropdownMenu>
                        </SubframeCore.DropdownMenu.Content>
                      </SubframeCore.DropdownMenu.Portal>
                    </SubframeCore.DropdownMenu.Root>
                  </div>
                </div>
                <div className="flex w-full items-center gap-2">
                  <div className="flex grow shrink-0 basis-0 flex-col items-start gap-2">
                    <span className="text-heading-3 font-heading-3 text-default-font">
                      Report Format
                    </span>
                    <SubframeCore.DropdownMenu.Root>
                      <SubframeCore.DropdownMenu.Trigger asChild={true}>
                        <Button
                          variant="neutral-secondary"
                          iconRight="FeatherChevronDown"
                          onClick={(event: React.MouseEvent<HTMLButtonElement>) => {}}
                        >
                          Choose a Format
                        </Button>
                      </SubframeCore.DropdownMenu.Trigger>
                      <SubframeCore.DropdownMenu.Portal>
                        <SubframeCore.DropdownMenu.Content
                          side="bottom"
                          align="start"
                          sideOffset={4}
                          asChild={true}
                        >
                          <DropdownMenu>
                            <DropdownMenu.DropdownItem icon={null}>
                              Text / Doc
                            </DropdownMenu.DropdownItem>
                            <DropdownMenu.DropdownItem icon={null}>
                              Visual
                            </DropdownMenu.DropdownItem>
                            <DropdownMenu.DropdownItem icon={null}>
                              Mixed Mode
                            </DropdownMenu.DropdownItem>
                          </DropdownMenu>
                        </SubframeCore.DropdownMenu.Content>
                      </SubframeCore.DropdownMenu.Portal>
                    </SubframeCore.DropdownMenu.Root>
                  </div>
                </div>
                <div className="flex w-full items-center gap-2">
                  <div className="flex grow shrink-0 basis-0 flex-col items-start gap-2">
                    <span className="text-heading-3 font-heading-3 text-default-font">
                      Describe Report Content
                    </span>
                    <TextArea
                      className="h-auto w-full flex-none"
                      error={false}
                      variant="outline"
                      label=""
                      helpText=""
                    >
                      <TextArea.Input
                        className="h-auto min-h-[96px] w-full flex-none"
                        placeholder=""
                        value=""
                        onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {}}
                      />
                    </TextArea>
                  </div>
                </div>
                <div className="flex w-full items-center gap-4">
                  <div className="flex grow shrink-0 basis-0 flex-col items-start gap-2">
                    <span className="text-heading-3 font-heading-3 text-default-font">
                      Report Template (optional)
                    </span>
                    <span className="text-caption font-caption text-subtext-color">
                      For best results, upload a template of a prior report that can be
                      used as a reference
                    </span>
                    <Button
                      variant="neutral-secondary"
                      icon="FeatherUpload"
                      onClick={(event: React.MouseEvent<HTMLButtonElement>) => {}}
                    >
                      Upload
                    </Button>
                  </div>
                </div>
              </div>
              <Button
                className="h-10 w-full flex-none"
                size="large"
                icon="FeatherSparkles"
                onClick={(event: React.MouseEvent<HTMLButtonElement>) => {}}
              >
                Generate Report
              </Button>
            </div>
          </div>
        </DialogLayout>
      </DefaultPageLayout>
  )
}
