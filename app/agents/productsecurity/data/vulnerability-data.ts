import { getRelativeDate } from "@/app/utils/date-utils"

export type SecurityTool = 'COVERITY' | 'SNYK' | 'GITLAB' | 'BLACKDUCK';
export type VulnerabilityStatus = 'OPEN' | 'IN_REVIEW' | 'NOT_APPLICABLE' | 'FIXED' | 'ACCEPTED_RISK';
export type VulnerabilitySeverity = 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';
export type TeamOwnership = 'PLATFORM' | 'FRONTEND' | 'BACKEND' | 'DEVOPS' | 'SECURITY' | 'UNKNOWN';

export interface SecurityToolInfo {
    id: SecurityTool;
    name: string;
    description: string;
    purpose: string;
    lastScan?: string;
}

export interface ComplianceFramework {
    id: string;
    name: string;
    description: string;
    link: string;
}

export interface CompliancePolicy {
    id: string;
    name: string;
    description: string;
    policyText: string;
    policyLink: string;
    policyCode: string;
    frameworks: Array<{
        id: string;
        nextAuditDate: string;
        regulatoryBody?: string;
    }>;
    businessImpact: {
        financial: string[];
        operational: string[];
        regulatory: string[];
    };
}

export interface CVEInfo {
    id: string;
    name: string;
    summary: string;
    publishDate: string;
    cvssScore: number;
    cvssSeverity: string;
    cvssVector: string;
    impactedSystems: Array<{
        name: string;
        version: string;
        library?: string;
    }>;
}

export interface ToolOutput {
    toolName: string;
    summary: string;
    vulnerabilityType: string;
    location?: {
        repository: string;
        filePath: string;
        lineNumber: number;
        codeSnippet?: string;
    };
    recommendation?: string;
    detectionDate: string;
}

export interface CWEInfo {
    id: string;
    name: string;
    severity: string;
    description: string;
    link: string;
}

export interface OWASPInfo {
    id: string;
    name: string;
    summary: string;
    description: string;
    exampleAttacks: string[];
    mitigation: string[];
    relatedCWEs: CWEInfo[];
}

interface SystemApplicability {
    systemName: string;
    vulnerableVersion: string;
    ourVersion: string;
    buildFlags?: string[];
    environment: 'development' | 'staging' | 'production';
    isAffected: boolean;
    reason?: string;
}

interface ApplicabilityAssessment {
    isApplicable: boolean;
    justification?: string;
    assessedBy?: string;
    assessedDate?: string;
    systemAnalysis: SystemApplicability[];
}

interface ComplianceImpact {
    auditRisk: 'HIGH' | 'MEDIUM' | 'LOW';
    nextAuditDate: string;
    primaryFramework: string;
    controlIds: string[];
    nextSteps: {
        technical: string[];
        process: string[];
        documentation: string[];
        timeline: string;
        owner: string;
    };
}

interface RemediationDetails {
    jiraTicket?: {
        id: string;
        url: string;
        status: string;
    };
    pullRequest?: {
        id: string;
        url: string;
        status: string;
    };
}

export interface Vulnerability {
    id: string;
    title: string;
    description: string;
    severity: VulnerabilitySeverity;
    status: VulnerabilityStatus;
    dateIdentified: string;
    dateUpdated: string;
    
    // Source Information
    sourceTools: SecurityTool[];
    cveData?: CVEInfo[];
    owaspCategories?: OWASPInfo[];
    
    // Technical Details
    affectedRepository: string;
    teamOwner: TeamOwnership;
    affectedComponent: string;
    affectedVersion: string;
    buildFlags?: string[];
    
    // Assessment
    applicabilityAssessment: ApplicabilityAssessment;
    
    // Impact Analysis
    impactedPolicies: string[]; // References to CompliancePolicy ids
    remediationPlan?: string;
    workaround?: string;
    toolOutputs: ToolOutput[];
    complianceImpact: ComplianceImpact;
    remediationDetails: RemediationDetails;
}

// Security Tool Definitions
export const securityTools: SecurityToolInfo[] = [
    {
        id: 'COVERITY',
        name: 'Coverity',
        description: 'Static Application Security Testing (SAST) tool',
        purpose: 'Analyzes source code for security vulnerabilities, coding defects, and compliance issues',
        lastScan: getRelativeDate(-1)
    },
    {
        id: 'SNYK',
        name: 'Snyk',
        description: 'Software Composition Analysis (SCA) tool',
        purpose: 'Scans dependencies for known vulnerabilities and license compliance issues',
        lastScan: getRelativeDate(-2)
    },
    {
        id: 'GITLAB',
        name: 'GitLab Security Scanning',
        description: 'Built-in security scanning tools in GitLab',
        purpose: 'Provides SAST, DAST, container scanning, and dependency scanning',
        lastScan: getRelativeDate(-1)
    },
    {
        id: 'BLACKDUCK',
        name: 'Black Duck',
        description: 'Software Composition Analysis (SCA) tool',
        purpose: 'Manages open source security, license compliance, and code quality',
        lastScan: getRelativeDate(-3)
    }
];

// Compliance Frameworks
export const complianceFrameworks: ComplianceFramework[] = [
    {
        id: 'SOC2',
        name: 'SOC 2',
        description: 'Service Organization Control 2',
        link: 'https://www.aicpa.org/soc2'
    },
    {
        id: 'PCI',
        name: 'PCI DSS',
        description: 'Payment Card Industry Data Security Standard',
        link: 'https://www.pcisecuritystandards.org'
    },
    {
        id: 'HIPAA',
        name: 'HIPAA',
        description: 'Health Insurance Portability and Accountability Act',
        link: 'https://www.hhs.gov/hipaa'
    }
];

// Compliance Policies
export const compliancePolicies: CompliancePolicy[] = [
    {
        id: 'SEC-001',
        name: 'Web Application Security Controls',
        policyCode: 'POL-WAF-001',
        policyLink: 'https://policies.acme.com/security/waf-controls',
        description: 'Policy for implementing and maintaining web application security controls including WAF configurations',
        policyText: 'All internet-facing applications must implement WAF protection with managed rules enabled for OWASP Top 10 threats. WAF logging must be enabled and retained for a minimum of 90 days. Custom rules must be reviewed quarterly and updated based on threat intelligence.',
        frameworks: [
            {
                id: 'SOC2',
                nextAuditDate: getRelativeDate(74), // ~2.5 months from now
                regulatoryBody: 'AICPA'
            },
            {
                id: 'PCI',
                nextAuditDate: getRelativeDate(31), // ~1 month from now
                regulatoryBody: 'PCI Council'
            },
            {
                id: 'ISO27001',
                nextAuditDate: getRelativeDate(180), // ~6 months from now
                regulatoryBody: 'BSI'
            }
        ],
        businessImpact: {
            financial: [
                'Increased cyber insurance premiums due to inadequate WAF controls',
                'Potential fines up to $100,000 per day for PCI non-compliance',
                'Loss of business from enterprise customers requiring SOC2 compliance'
            ],
            operational: [
                'Mandatory remediation before Q1 2024 SOC2 audit',
                'Additional security controls required for all new deployments',
                'Increased oversight from security team on infrastructure changes'
            ],
            regulatory: [
                'Risk of failing upcoming PCI-DSS audit in February 2024',
                'Non-compliance with ISO27001 control objectives A.13.1 and A.14.2',
                'Mandatory reporting to PCI Council if breach occurs'
            ]
        }
    },
    {
        id: 'SEC-002',
        name: 'Secure Authentication Controls',
        policyCode: 'POL-AUTH-001',
        policyLink: 'https://policies.acme.com/security/authentication',
        description: 'Policy for implementing secure authentication mechanisms and credential management',
        policyText: 'All authentication mechanisms must implement industry standard security controls including MFA, password policies, and secure credential storage...',
        frameworks: [
            {
                id: 'SOC2',
                nextAuditDate: '2024-03-15',
                regulatoryBody: 'AICPA'
            },
            {
                id: 'PCI',
                nextAuditDate: '2024-02-01',
                regulatoryBody: 'PCI Council'
            }
        ],
        businessImpact: {
            financial: [
                'Potential fines for non-compliance with PCI-DSS authentication requirements',
                'Increased costs from security incidents due to weak authentication'
            ],
            operational: [
                'Required implementation of MFA across all systems',
                'Regular password policy reviews and updates'
            ],
            regulatory: [
                'Non-compliance with PCI-DSS Requirements 8.1 and 8.2',
                'SOC2 CC6.1 control deficiencies'
            ]
        }
    },
    {
        id: 'SEC-003',
        name: 'Database Security Controls',
        policyCode: 'POL-DB-001',
        policyLink: 'https://policies.acme.com/security/database',
        description: 'Policy for implementing secure database access and configuration',
        policyText: 'All database access must use parameterized queries or ORMs. Direct SQL concatenation is prohibited. Databases must implement encryption at rest, access logging, and proper authentication controls.',
        frameworks: [
            {
                id: 'SOC2',
                nextAuditDate: '2024-03-15',
                regulatoryBody: 'AICPA'
            },
            {
                id: 'PCI',
                nextAuditDate: '2024-02-01',
                regulatoryBody: 'PCI Council'
            },
            {
                id: 'ISO27001',
                nextAuditDate: '2024-06-30',
                regulatoryBody: 'BSI'
            }
        ],
        businessImpact: {
            financial: [
                'Potential fines up to $500,000 for PCI-DSS violations',
                'Increased cyber insurance premiums due to poor database controls',
                'Cost of emergency remediation if breach occurs'
            ],
            operational: [
                'Mandatory code review for all database queries',
                'Database security scanning required before deployment',
                'Regular penetration testing of database access'
            ],
            regulatory: [
                'PCI-DSS Requirements 3.4 and 7.2',
                'SOC2 CC6.7 and CC8.1 requirements',
                'ISO27001 A.12.1.1 controls'
            ]
        }
    },
    {
        id: 'SEC-004',
        name: 'Software Dependency Management',
        policyCode: 'POL-DEP-001',
        policyLink: 'https://policies.acme.com/security/dependency-management',
        description: 'Policy for managing and securing third-party dependencies and components',
        policyText: 'All third-party dependencies must be from approved sources, regularly updated, and monitored for security vulnerabilities. Critical vulnerabilities must be patched within 14 days.',
        frameworks: [
            {
                id: 'SOC2',
                nextAuditDate: '2024-03-15',
                regulatoryBody: 'AICPA'
            },
            {
                id: 'PCI',
                nextAuditDate: '2024-02-01',
                regulatoryBody: 'PCI Council'
            },
            {
                id: 'ISO27001',
                nextAuditDate: '2024-06-30',
                regulatoryBody: 'BSI'
            }
        ],
        businessImpact: {
            financial: [
                'Potential breach costs from exploited vulnerabilities',
                'Emergency patching costs for critical vulnerabilities',
                'Increased security tooling costs for dependency scanning'
            ],
            operational: [
                'Mandatory dependency updates across all services',
                'Regular security reviews of third-party code',
                'Continuous monitoring of dependency vulnerabilities'
            ],
            regulatory: [
                'PCI-DSS Requirements 6.2 and 6.5.6',
                'SOC2 CC8.1 and CC7.1 requirements',
                'ISO27001 A.14.2.5 controls'
            ]
        }
    },
    {
        id: 'SEC-005',
        name: 'Application Security Controls',
        policyCode: 'POL-APP-001',
        policyLink: 'https://policies.acme.com/security/application-security',
        description: 'Policy for implementing secure application development practices and controls',
        policyText: 'Applications must implement security controls to prevent common vulnerabilities including but not limited to insecure deserialization, XSS, CSRF, and injection attacks. All security-critical functions must undergo security review.',
        frameworks: [
            {
                id: 'SOC2',
                nextAuditDate: '2024-03-15',
                regulatoryBody: 'AICPA'
            },
            {
                id: 'PCI',
                nextAuditDate: '2024-02-01',
                regulatoryBody: 'PCI Council'
            },
            {
                id: 'ISO27001',
                nextAuditDate: '2024-06-30',
                regulatoryBody: 'BSI'
            }
        ],
        businessImpact: {
            financial: [
                'Potential breach costs from application vulnerabilities',
                'Remediation costs for security findings',
                'Additional development costs for security controls'
            ],
            operational: [
                'Security review required for all new features',
                'Regular application security testing',
                'Mandatory security training for developers'
            ],
            regulatory: [
                'PCI-DSS Requirements 6.5 and 6.6',
                'SOC2 CC7.1 and CC8.1',
                'ISO27001 A.14.2 controls'
            ]
        }
    },
    {
        id: 'SEC-006',
        name: 'Frontend Security Controls',
        policyCode: 'POL-FE-001',
        policyLink: 'https://policies.acme.com/security/frontend-security',
        description: 'Policy for implementing secure frontend development practices and controls',
        policyText: 'All frontend applications must implement XSS protections, CSP headers, and secure content rendering. Direct DOM manipulation and unsafe React practices are prohibited.',
        frameworks: [
            {
                id: 'SOC2',
                nextAuditDate: '2024-03-15',
                regulatoryBody: 'AICPA'
            },
            {
                id: 'PCI',
                nextAuditDate: '2024-02-01',
                regulatoryBody: 'PCI Council'
            }
        ],
        businessImpact: {
            financial: [
                'Potential breach costs from client-side attacks',
                'Remediation costs for frontend vulnerabilities',
                'Loss of customer trust from visible security issues'
            ],
            operational: [
                'Security review required for all UI components',
                'Regular frontend security testing',
                'Content Security Policy maintenance'
            ],
            regulatory: [
                'PCI-DSS Requirements 6.5.7',
                'SOC2 CC7.1 and CC7.4 requirements'
            ]
        }
    },
    {
        id: 'SEC-007',
        name: 'Cloud Infrastructure Security Controls',
        policyCode: 'POL-CLOUD-001',
        policyLink: 'https://policies.acme.com/security/cloud-security',
        description: 'Policy for implementing secure cloud infrastructure configurations and controls',
        policyText: 'All cloud resources must follow security best practices including encryption, access controls, and proper configuration. Public access must be explicitly justified and documented.',
        frameworks: [
            {
                id: 'SOC2',
                nextAuditDate: '2024-03-15',
                regulatoryBody: 'AICPA'
            },
            {
                id: 'ISO27001',
                nextAuditDate: '2024-06-30',
                regulatoryBody: 'BSI'
            },
            {
                id: 'PCI',
                nextAuditDate: '2024-02-01',
                regulatoryBody: 'PCI Council'
            }
        ],
        businessImpact: {
            financial: [
                'Potential data breach costs from misconfigured resources',
                'Regulatory fines for improper data protection',
                'Cloud resource waste from improper configurations'
            ],
            operational: [
                'Regular cloud security posture assessments',
                'Mandatory infrastructure security reviews',
                'Continuous cloud configuration monitoring'
            ],
            regulatory: [
                'PCI-DSS Requirements 2.2 and 7.2.1',
                'SOC2 CC6.1 and CC7.1 requirements',
                'ISO27001 A.13.1.3 controls'
            ]
        }
    },
    {
        id: 'SEC-008',
        name: 'Supply Chain Security Controls',
        policyCode: 'POL-SUPPLY-001',
        policyLink: 'https://policies.acme.com/security/supply-chain',
        description: 'Policy for managing software supply chain security risks and controls',
        policyText: 'All software dependencies must be from verified sources, regularly scanned for vulnerabilities, and maintained with a software bill of materials (SBOM). Critical vulnerabilities must be remediated within defined SLAs.',
        frameworks: [
            {
                id: 'SOC2',
                nextAuditDate: '2024-03-15',
                regulatoryBody: 'AICPA'
            },
            {
                id: 'ISO27001',
                nextAuditDate: '2024-06-30',
                regulatoryBody: 'BSI'
            }
        ],
        businessImpact: {
            financial: [
                'Supply chain attack remediation costs',
                'Business disruption from vulnerable components',
                'Increased security tooling for dependency scanning'
            ],
            operational: [
                'Continuous dependency vulnerability monitoring',
                'Regular dependency update cycles',
                'SBOM maintenance requirements'
            ],
            regulatory: [
                'SOC2 CC8.1 and CC7.1 requirements',
                'ISO27001 A.14.1.1 controls'
            ]
        }
    },
    {
        id: 'SEC-009',
        name: 'API Security Controls',
        policyCode: 'POL-API-001',
        policyLink: 'https://policies.acme.com/security/api-security',
        description: 'Policy for implementing secure API design and controls',
        policyText: 'All APIs must implement rate limiting, authentication, and monitoring controls. APIs must protect against automated attacks and abuse through proper throttling mechanisms.',
        frameworks: [
            {
                id: 'SOC2',
                nextAuditDate: '2024-03-15',
                regulatoryBody: 'AICPA'
            },
            {
                id: 'PCI',
                nextAuditDate: '2024-02-01',
                regulatoryBody: 'PCI Council'
            }
        ],
        businessImpact: {
            financial: [
                'Service disruption costs from API abuse',
                'Increased infrastructure costs from uncontrolled usage',
                'Potential breach costs from API exploitation'
            ],
            operational: [
                'API security monitoring requirements',
                'Regular penetration testing of APIs',
                'API usage pattern analysis'
            ],
            regulatory: [
                'PCI-DSS Requirements 6.5.10',
                'SOC2 CC6.1 and CC6.8 requirements'
            ]
        }
    },
    {
        id: 'SEC-010',
        name: 'Security Monitoring and Logging Controls',
        policyCode: 'POL-MON-001',
        policyLink: 'https://policies.acme.com/security/monitoring',
        description: 'Policy for implementing comprehensive security monitoring, logging, and alerting controls',
        policyText: 'All security controls must have comprehensive logging enabled. Logs must be retained for minimum 1 year, protected from tampering, and integrated with SIEM for real-time monitoring and alerting.',
        frameworks: [
            {
                id: 'SOC2',
                nextAuditDate: '2024-03-15',
                regulatoryBody: 'AICPA'
            },
            {
                id: 'PCI',
                nextAuditDate: '2024-02-01',
                regulatoryBody: 'PCI Council'
            },
            {
                id: 'ISO27001',
                nextAuditDate: '2024-06-30',
                regulatoryBody: 'BSI'
            }
        ],
        businessImpact: {
            financial: [
                'Increased storage costs for extended log retention',
                'SIEM licensing and operational costs',
                'Potential fines for inadequate security monitoring'
            ],
            operational: [
                'Continuous security monitoring requirements',
                'Regular log review and analysis',
                'Incident response capabilities'
            ],
            regulatory: [
                'PCI-DSS Requirements 10.1-10.7',
                'SOC2 CC7.2 and CC7.3 requirements',
                'ISO27001 A.12.4 controls'
            ]
        }
    }
];

// Sample Vulnerabilities
export const vulnerabilities: Vulnerability[] = [
    {
        id: 'VUL-001',
        title: 'Hardcoded Credentials in Configuration',
        description: 'Hardcoded API key found in configuration file',
        severity: 'CRITICAL',
        status: 'FIXED',
        dateIdentified: getRelativeDate(-3),
        dateUpdated: getRelativeDate(-1),
        
        sourceTools: ['SNYK'],
        cveData: [
            {
                id: 'CVE-2023-1234',
                name: 'Hardcoded Credentials Exposure',
                summary: 'Application exposes sensitive credentials in configuration files',
                publishDate: '2023-06-15',
                cvssScore: 7.5,
                cvssSeverity: 'HIGH',
                cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N',
                impactedSystems: [
                    {
                        name: 'jsonwebtoken',
                        version: '8.5.1',
                        library: 'jsonwebtoken'
                    },
                    {
                        name: 'passport',
                        version: '0.4.1', 
                        library: 'passport'
                    },
                    {
                        name: 'express-jwt',
                        version: '6.0.0',
                        library: 'express-jwt'
                    },
                    {
                        name: 'node-jose',
                        version: '2.0.0',
                        library: 'node-jose'
                    }
                ]
            }
        ],
        owaspCategories: [
            {
                id: 'A07:2021',
                name: 'Identification and Authentication Failures',
                summary: 'Authentication failures can expose sensitive credentials and allow unauthorized access to systems',
                description: 'Authentication failures occur when applications improperly store or handle credentials, allowing attackers to compromise passwords, keys, or session tokens...',
                exampleAttacks: [
                    'Exposure of credentials in source code or configuration files',
                    'Use of hardcoded API keys and passwords',
                    'Storing sensitive credentials in plaintext'
                ],
                mitigation: [
                    'Use environment variables for sensitive credentials',
                    'Implement secure secret management systems',
                    'Regular credential rotation and access reviews',
                    'Encrypt all sensitive credentials at rest'
                ],
                relatedCWEs: [
                    {
                        id: 'CWE-798',
                        name: 'Use of Hard-coded Credentials',
                        severity: 'HIGH',
                        description: 'The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data...',
                        link: 'https://cwe.mitre.org/data/definitions/798.html'
                    },
                    {
                        id: 'CWE-259',
                        name: 'Use of Hard-coded Password',
                        severity: 'HIGH', 
                        description: 'The software contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components...',
                        link: 'https://cwe.mitre.org/data/definitions/259.html'
                    }
                ]
            }
        ],
        affectedRepository: 'github.com/acme/auth-service',
        teamOwner: 'BACKEND',
        affectedComponent: 'ConfigService',
        affectedVersion: '1.2.0',
        buildFlags: ['--with-security=true'],
        
        applicabilityAssessment: {
            isApplicable: true,
            justification: 'Hardcoded credentials found in production configuration files. While some instances are in development only, critical production endpoints are affected.',
            assessedBy: 'John Smith',
            assessedDate: getRelativeDate(-1),
            systemAnalysis: [
                {
                    systemName: 'auth-service',
                    vulnerableVersion: '1.2.0',
                    ourVersion: '1.2.0',
                    environment: 'production',
                    isAffected: true,
                    reason: 'Production configuration contains hardcoded API keys'
                },
                {
                    systemName: 'test-environment',
                    vulnerableVersion: '1.2.0',
                    ourVersion: '1.2.0',
                    environment: 'development',
                    isAffected: false,
                    reason: 'Test credentials acceptable in development environment'
                }
            ]
        },
        
        impactedPolicies: ['SEC-001', 'SEC-002'],
        remediationPlan: 'Move sensitive credentials to environment variables or secure secret storage',
        toolOutputs: [
            {
                toolName: 'Snyk',
                summary: 'Hardcoded API key found in configuration file',
                vulnerabilityType: 'Secret Exposure',
                location: {
                    repository: 'github.com/company/auth-service',
                    filePath: 'src/config/auth.config.ts',
                    lineNumber: 42,
                    codeSnippet: 'const API_KEY = "sk_live_123456789";'
                },
                recommendation: 'Move sensitive credentials to environment variables or secure secret storage',
                detectionDate: getRelativeDate(-3)
            },
            {
                toolName: 'GitGuardian',
                summary: 'API Key exposed in source code',
                vulnerabilityType: 'Credential Exposure',
                location: {
                    repository: 'github.com/company/auth-service',
                    filePath: 'src/config/auth.config.ts',
                    lineNumber: 42,
                    codeSnippet: 'const API_KEY = "sk_live_123456789";'
                },
                recommendation: 'Move sensitive credentials to environment variables or secure secret storage',
                detectionDate: getRelativeDate(-3)
            }
        ],
        complianceImpact: {
            auditRisk: 'HIGH',
            nextAuditDate: getRelativeDate(31), // ~1 month from now
            primaryFramework: 'PCI-DSS',
            controlIds: ['Requirement 8.2.1', 'Requirement 8.2.3'],
            nextSteps: {
                technical: [
                    'Move credentials to AWS Secrets Manager',
                    'Implement credential rotation',
                    'Add encryption for stored credentials'
                ],
                process: [
                    'Update deployment procedures to use secret management',
                    'Create credential rotation schedule'
                ],
                documentation: [
                    'Update security architecture diagrams',
                    'Document new credential management process'
                ],
                timeline: getRelativeDate(5),
                owner: 'Security Team'
            }
        },
        remediationDetails: {
            jiraTicket: {
                id: 'SEC-1234',
                url: 'https://acme.atlassian.net/browse/SEC-1234',
                status: 'In Progress'
            },
            pullRequest: {
                id: '456',
                url: 'https://github.com/acme/auth-service/pull/456',
                status: 'Under Review'
            }
        },
    },
    {
        id: 'VUL-002',
        title: 'Critical SQL Injection Vulnerability',
        description: 'Possible SQL injection due to unsanitized user input',
        severity: 'CRITICAL',
        status: 'IN_REVIEW',
        dateIdentified: getRelativeDate(-5),
        dateUpdated: getRelativeDate(-5),
        
        sourceTools: ['COVERITY'],
        cveData: [{
            id: 'CVE-2023-1234',
            name: 'SQL Injection in User Service',
            summary: 'SQL injection vulnerability in user authentication flow',
            publishDate: '2023-05-15',
            cvssScore: 9.8,
            cvssSeverity: 'CRITICAL',
            cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
            impactedSystems: [
                {
                    name: 'mysql2',
                    version: '2.3.0',
                    library: 'npm'
                },
                {
                    name: '@types/mysql2',
                    version: '2.3.0',
                    library: 'npm'
                },
                {
                    name: 'sequelize',
                    version: '6.6.5',
                    library: 'npm'
                },
                {
                    name: '@types/sequelize',
                    version: '4.28.10',
                    library: 'npm'
                }
            ]
        }],
        owaspCategories: [{
            id: 'A03:2021',
            name: 'Injection',
            summary: 'SQL injection vulnerabilities occur when untrusted data is sent to SQL interpreter as part of a query',
            description: 'SQL injection flaws occur when applications construct SQL queries by concatenating user input directly into the query string...',
            exampleAttacks: [
                'Authentication bypass using OR 1=1',
                'Data exfiltration through UNION attacks',
                'Blind SQL injection through boolean conditions'
            ],
            mitigation: [
                'Use parameterized queries or prepared statements',
                'Implement proper input validation and sanitization',
                'Use ORMs with built-in SQL injection protection',
                'Apply principle of least privilege for database users'
            ],
            relatedCWEs: [
                {
                    id: 'CWE-89',
                    name: 'SQL Injection',
                    severity: 'HIGH',
                    description: 'The software constructs all or part of an SQL command using externally-influenced input from an upstream component...',
                    link: 'https://cwe.mitre.org/data/definitions/89.html'
                },
                {
                    id: 'CWE-564',
                    name: 'SQL Injection: Hibernate',
                    severity: 'HIGH',
                    description: 'Using Hibernate to execute a dynamic SQL statement built with user-controlled input...',
                    link: 'https://cwe.mitre.org/data/definitions/564.html'
                }
            ]
        }],
        
        affectedRepository: 'github.com/acme/user-service',
        teamOwner: 'PLATFORM',
        affectedComponent: 'UserController',
        affectedVersion: '2.1.0',
        buildFlags: ['--with-security=true'],
        
        applicabilityAssessment: {
            isApplicable: true,
            justification: 'Confirmed SQL injection vulnerability in production code. While some instances use parameterized queries, critical endpoints remain vulnerable.',
            assessedBy: 'Jane Doe',
            assessedDate: getRelativeDate(-2),
            systemAnalysis: [
                {
                    systemName: 'payment-service/UserRepository',
                    vulnerableVersion: '1.0.0',
                    ourVersion: '1.0.0',
                    environment: 'production',
                    isAffected: true,
                    reason: 'Raw SQL queries with user input concatenation'
                },
                {
                    systemName: 'payment-service/OrderRepository',
                    vulnerableVersion: '1.0.0',
                    ourVersion: '1.0.0',
                    environment: 'production',
                    isAffected: false,
                    reason: 'Using TypeORM with parameterized queries'
                }
            ]
        },
        
        impactedPolicies: ['SEC-001', 'SEC-003'],
        toolOutputs: [
            {
                toolName: 'SonarQube',
                summary: 'SQL injection vulnerability detected in authentication flow',
                vulnerabilityType: 'SQL Injection',
                location: {
                    repository: 'github.com/acme/user-service',
                    filePath: 'src/services/auth.service.ts',
                    lineNumber: 156,
                    codeSnippet: 'const query = `SELECT * FROM users WHERE username = "${username}" AND password = "${password}"`;'
                },
                recommendation: 'Use parameterized queries with mysql2 library or switch to an ORM like Sequelize',
                detectionDate: getRelativeDate(-5)
            }
        ],
        complianceImpact: {
            auditRisk: 'HIGH',
            nextAuditDate: getRelativeDate(31), // ~1 month from now
            primaryFramework: 'PCI-DSS',
            controlIds: ['Requirement 6.5.1', 'Requirement 6.6'],
            nextSteps: {
                technical: [
                    'Replace raw SQL queries with TypeORM methods',
                    'Implement prepared statements for remaining direct queries',
                    'Add input validation middleware',
                    'Enable SQL query logging and monitoring'
                ],
                process: [
                    'Update code review checklist to include SQL injection checks',
                    'Schedule security training for development team',
                    'Create database query security standards document'
                ],
                documentation: [
                    'Update data flow diagrams with new query patterns',
                    'Document new database access patterns',
                    'Update security controls matrix for PCI-DSS'
                ],
                timeline: getRelativeDate(20),
                owner: 'Database Security Team'
            }
        },
        remediationDetails: {
            jiraTicket: {
                id: 'SEC-1235',
                url: 'https://acme.atlassian.net/browse/SEC-1235',
                status: 'Backlog'
            }
        },
    },
    {
        id: 'VUL-003',
        title: 'Outdated Log4j Version',
        description: 'Using vulnerable version of Log4j library with critical RCE vulnerability',
        severity: 'CRITICAL',
        status: 'IN_REVIEW',
        dateIdentified: getRelativeDate(-15),
        dateUpdated: getRelativeDate(-2),
        
        sourceTools: ['SNYK', 'BLACKDUCK'],
        toolOutputs: [
            {
                toolName: 'SNYK',
                summary: 'Critical RCE vulnerability in Log4j',
                vulnerabilityType: 'Remote Code Execution',
                location: {
                    repository: 'github.com/acme/payment-service',
                    filePath: 'pom.xml',
                    lineNumber: 78,
                    codeSnippet: '<log4j.version>2.14.1</log4j.version>'
                },
                recommendation: 'Upgrade Log4j to version 2.17.1 or later to patch CVE-2021-44228',
                detectionDate: getRelativeDate(-15)
            },
            {
                toolName: 'BLACKDUCK',
                summary: 'Multiple Log4j vulnerabilities detected',
                vulnerabilityType: 'Multiple',
                location: {
                    repository: 'github.com/acme/payment-service',
                    filePath: 'build.gradle',
                    lineNumber: 45,
                    codeSnippet: 'implementation "org.apache.logging.log4j:log4j-core:2.14.1"'
                },
                recommendation: 'Update all Log4j dependencies to version 2.17.1 or higher',
                detectionDate: getRelativeDate(-14)
            }
        ],
        
        affectedRepository: 'github.com/acme/payment-service',
        teamOwner: 'PLATFORM',
        affectedComponent: 'log4j-core',
        affectedVersion: '2.14.1',
        
        applicabilityAssessment: {
            isApplicable: false,
            justification: 'While Log4j is present in our dependencies, we use a patched version and have JNDI lookups disabled in all environments.',
            assessedBy: 'Jane Doe',
            assessedDate: getRelativeDate(-2),
            systemAnalysis: [
                {
                    systemName: 'org.apache.logging.log4j:log4j-core',
                    vulnerableVersion: '2.14.1',
                    ourVersion: '2.17.1',
                    buildFlags: ['log4j2.formatMsgNoLookups=true'],
                    environment: 'production',
                    isAffected: false,
                    reason: 'Using patched version with JNDI lookups disabled'
                },
                {
                    systemName: 'org.apache.logging.log4j:log4j-api',
                    vulnerableVersion: '2.14.1',
                    ourVersion: '2.17.1',
                    environment: 'production',
                    isAffected: false,
                    reason: 'Using patched version'
                }
            ]
        },
        
        impactedPolicies: ['SEC-001', 'SEC-004'],
        remediationPlan: 'Upgrade to Log4j 2.17.1 or higher',
        
        cveData: [
            {
                id: 'CVE-2021-44228',
                name: 'Log4Shell',
                summary: 'Remote code execution vulnerability in Apache Log4j',
                publishDate: '2021-12-10',
                cvssScore: 10.0,
                cvssSeverity: 'CRITICAL',
                cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H',
                impactedSystems: [
                    {
                        name: 'org.apache.logging.log4j:log4j-core',
                        version: '2.14.1',
                        library: 'Maven'
                    },
                    {
                        name: 'org.apache.logging.log4j:log4j-api',
                        version: '2.14.1',
                        library: 'Maven'
                    },
                    {
                        name: 'org.springframework.boot:spring-boot-starter-log4j2',
                        version: '2.6.1',
                        library: 'Maven'
                    },
                    {
                        name: 'org.apache.logging.log4j:log4j-slf4j-impl',
                        version: '2.14.1',
                        library: 'Maven'
                    },
                    {
                        name: 'com.amazonaws:aws-lambda-java-log4j2',
                        version: '1.3.0',
                        library: 'Maven'
                    }
                ]
            },
            {
                id: 'CVE-2021-45046',
                name: 'Log4j JNDI RCE',
                summary: 'Additional remote code execution vulnerability in Log4j',
                publishDate: '2021-12-14',
                cvssScore: 9.0,
                cvssSeverity: 'CRITICAL',
                cvssVector: 'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H',
                impactedSystems: [
                    {
                        name: 'org.apache.logging.log4j:log4j-core',
                        version: '2.15.0',
                        library: 'Maven'
                    },
                    {
                        name: 'org.apache.logging.log4j:log4j-api',
                        version: '2.15.0',
                        library: 'Maven'
                    }
                ]
            }
        ],
        owaspCategories: [
            {
                id: 'A06:2021',
                name: 'Vulnerable and Outdated Components',
                summary: 'Using vulnerable version of Log4j exposes applications to remote code execution',
                description: 'The Log4Shell vulnerability allows attackers to execute arbitrary code on affected systems through JNDI lookups in Log4j, potentially leading to complete system compromise...',
                exampleAttacks: [
                    'JNDI LDAP/RMI outbound connections',
                    'Remote code execution through ${jndi:ldap://...} strings',
                    'Data exfiltration via DNS queries',
                    'Server-side request forgery through JNDI'
                ],
                mitigation: [
                    'Upgrade Log4j to version 2.17.1 or higher',
                    'Enable JVM flag to disable JNDI lookups',
                    'Implement WAF rules to block JNDI patterns',
                    'Monitor for suspicious LDAP/RMI connections',
                    'Deploy runtime application self-protection (RASP)'
                ],
                relatedCWEs: [
                    {
                        id: 'CWE-502',
                        name: 'Deserialization of Untrusted Data',
                        severity: 'CRITICAL',
                        description: 'The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid...',
                        link: 'https://cwe.mitre.org/data/definitions/502.html'
                    },
                    {
                        id: 'CWE-917',
                        name: 'Improper Neutralization of Special Elements used in an Expression Language Statement',
                        severity: 'CRITICAL',
                        description: 'The application receives input that is used in an expression language (EL) statement without neutralizing special elements that could modify the intended EL statement...',
                        link: 'https://cwe.mitre.org/data/definitions/917.html'
                    }
                ]
            }
        ],
        complianceImpact: {
            auditRisk: 'HIGH',
            nextAuditDate: getRelativeDate(31), // ~1 month from now
            primaryFramework: 'PCI-DSS',
            controlIds: ['Requirement 6.2', 'Requirement 6.5.6'],
            nextSteps: {
                technical: [
                    'Upgrade Log4j to version 2.17.1 or higher',
                    'Enable JNDI lookups disable flag',
                    'Implement automated dependency scanning in CI/CD',
                    'Deploy WAF rules to detect Log4Shell patterns'
                ],
                process: [
                    'Update dependency update procedures',
                    'Create emergency patch deployment process',
                    'Implement vulnerability scanning schedule'
                ],
                documentation: [
                    'Update software bill of materials (SBOM)',
                    'Document patched systems and versions',
                    'Update security controls documentation for PCI-DSS'
                ],
                timeline: getRelativeDate(10),
                owner: 'Platform Security Team'
            }
        },
        remediationDetails: {
            jiraTicket: {
                id: 'SEC-1236',
                url: 'https://acme.atlassian.net/browse/SEC-1236',
                status: 'In Progress'
            },
            pullRequest: {
                id: '789',
                url: 'https://github.com/acme/payment-service/pull/789',
                status: 'Changes Requested'
            }
        },
    },
    {
        id: 'VUL-004',
        title: 'Insecure Deserialization',
        description: 'Unsafe deserialization of user-supplied content',
        severity: 'HIGH',
        status: 'OPEN',
        dateIdentified: getRelativeDate(-20),
        dateUpdated: getRelativeDate(-20),
        
        sourceTools: ['COVERITY'],
        cveData: [{
            id: 'CVE-2023-34458',
            name: 'Insecure Deserialization in Java ObjectInputStream',
            summary: 'Unsafe deserialization of untrusted data leading to remote code execution',
            publishDate: '2023-07-20',
            cvssScore: 8.1,
            cvssSeverity: 'HIGH',
            cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H',
            impactedSystems: [
                {
                    name: 'com.fasterxml.jackson.core:jackson-databind',
                    version: '2.13.2',
                    library: 'Maven'
                },
                {
                    name: 'org.apache.commons:commons-collections4',
                    version: '4.3',
                    library: 'Maven'
                },
                {
                    name: 'org.yaml:snakeyaml',
                    version: '1.29',
                    library: 'Maven'
                }
            ]
        }],
        toolOutputs: [
            {
                toolName: 'COVERITY',
                summary: 'Unsafe deserialization of user-controlled data',
                vulnerabilityType: 'Insecure Deserialization',
                location: {
                    repository: 'github.com/acme/legacy-app',
                    filePath: 'src/main/java/com/acme/legacy/processor/DataProcessor.java',
                    lineNumber: 127,
                    codeSnippet: 'ObjectInputStream ois = new ObjectInputStream(userDataStream);'
                },
                recommendation: 'Use safe deserialization libraries or implement strict type filtering',
                detectionDate: getRelativeDate(-20)
            }
        ],
        owaspCategories: [
            {
                id: 'A08:2021',
                name: 'Software and Data Integrity Failures',
                summary: 'Insecure deserialization can lead to remote code execution',
                description: 'Applications and APIs that deserialize untrusted data are vulnerable to remote code execution, denial of service, and privilege escalation attacks...',
                exampleAttacks: [
                    'Remote code execution via malicious serialized objects',
                    'Denial of service through complex object graphs',
                    'Authentication bypass using manipulated session data'
                ],
                mitigation: [
                    'Implement integrity checks for serialized objects',
                    'Use safe deserialization libraries with type whitelisting',
                    'Validate all deserialized data before use',
                    'Monitor deserialization operations for anomalies'
                ],
                relatedCWEs: [
                    {
                        id: 'CWE-502',
                        name: 'Deserialization of Untrusted Data',
                        severity: 'HIGH',
                        description: 'The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid...',
                        link: 'https://cwe.mitre.org/data/definitions/502.html'
                    },
                    {
                        id: 'CWE-915',
                        name: 'Improperly Controlled Modification of Dynamically-Determined Object Attributes',
                        severity: 'HIGH',
                        description: 'The application receives input from an upstream component that can control the modification of object attributes that are dynamically determined...',
                        link: 'https://cwe.mitre.org/data/definitions/915.html'
                    }
                ]
            }
        ],
        
        affectedRepository: 'github.com/acme/legacy-app',
        teamOwner: 'UNKNOWN',
        affectedComponent: 'DataProcessor',
        affectedVersion: '1.0.0',
        
        impactedPolicies: ['SEC-004', 'SEC-005'],
        remediationPlan: 'Implement safe deserialization practices',
        applicabilityAssessment: {
            isApplicable: false,
            justification: 'While vulnerable libraries are present, deserialization is disabled in production and staging environments through build flags.',
            assessedBy: 'Mike Brown',
            assessedDate: getRelativeDate(-3),
            systemAnalysis: [
                {
                    systemName: 'com.fasterxml.jackson.core:jackson-databind',
                    vulnerableVersion: '2.13.2',
                    ourVersion: '2.13.2',
                    buildFlags: ['jackson.deserialization.enabled=false'],
                    environment: 'production',
                    isAffected: false,
                    reason: 'Deserialization disabled via build configuration'
                },
                {
                    systemName: 'org.yaml:snakeyaml',
                    vulnerableVersion: '1.29',
                    ourVersion: '1.31',
                    environment: 'production',
                    isAffected: false,
                    reason: 'Using patched version with safe deserialization'
                }
            ]
        },
        complianceImpact: {
            auditRisk: 'HIGH',
            nextAuditDate: getRelativeDate(31), // ~1 month from now
            primaryFramework: 'PCI-DSS',
            controlIds: ['Requirement 6.5.9', 'Requirement 6.6'],
            nextSteps: {
                technical: [
                    'Implement safe deserialization libraries',
                    'Add type whitelisting for all deserialized data',
                    'Enable security flags in Jackson library',
                    'Implement input validation controls'
                ],
                process: [
                    'Update secure coding guidelines',
                    'Review all deserialization implementations',
                    'Conduct security training on deserialization risks'
                ],
                documentation: [
                    'Update architecture diagrams with security controls',
                    'Document safe deserialization patterns',
                    'Create deserialization security checklist'
                ],
                timeline: getRelativeDate(10)   ,
                owner: 'Application Security Team'
            }
        },
        remediationDetails: {
            jiraTicket: {
                id: 'SEC-1237',
                url: 'https://acme.atlassian.net/browse/SEC-1237',
                status: 'Open'
            }
        },
    },
    {
        id: 'VUL-005',
        title: 'Cross-Site Scripting in Dashboard',
        description: 'Reflected XSS vulnerability in dashboard search component',
        severity: 'HIGH',
        status: 'IN_REVIEW',
        dateIdentified: getRelativeDate(-5),
        dateUpdated: getRelativeDate(-1),
        
        sourceTools: ['GITLAB'],
        toolOutputs: [
            {
                toolName: 'GITLAB',
                summary: 'Multiple XSS vulnerabilities detected in search component',
                vulnerabilityType: 'Cross-Site Scripting',
                location: {
                    repository: 'github.com/acme/admin-dashboard',
                    filePath: 'src/components/Search/SearchResults.tsx',
                    lineNumber: 45,
                    codeSnippet: 'div.innerHTML = `Search results for: ${searchQuery}`'
                },
                recommendation: 'Use React built-in XSS protection and implement proper input sanitization',
                detectionDate: getRelativeDate(-5)
            },
            {
                toolName: 'COVERITY',
                summary: 'Unsanitized user input reflected in HTML response',
                vulnerabilityType: 'Reflected XSS',
                location: {
                    repository: 'github.com/acme/admin-dashboard',
                    filePath: 'src/components/Search/SearchInput.tsx',
                    lineNumber: 78,
                    codeSnippet: 'dangerouslySetInnerHTML={{ __html: highlightedText }}'
                },
                recommendation: 'Use DOMPurify or similar library for sanitization',
                detectionDate: getRelativeDate(-4)
            }
        ],
        cveData: [{
            id: 'CVE-2023-43872',
            name: 'XSS in React Search Component',
            summary: 'Cross-site scripting vulnerability in search functionality',
            publishDate: '2023-10-01',
            cvssScore: 6.5,
            cvssSeverity: 'HIGH',
            cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:L/A:L',
            impactedSystems: [
                {
                    name: 'react',
                    version: '17.0.2',
                    library: 'npm'
                },
                {
                    name: '@types/react',
                    version: '17.0.39',
                    library: 'npm'
                },
                {
                    name: 'react-dom',
                    version: '17.0.2',
                    library: 'npm'
                },
                {
                    name: 'dompurify',
                    version: '2.3.3',
                    library: 'npm'
                }
            ]
        }],
        owaspCategories: [
            {
                id: 'A03:2021',
                name: 'Cross-Site Scripting',
                summary: 'Cross-Site Scripting vulnerabilities occur when untrusted data is included in web pages',
                description: 'Cross-Site Scripting (XSS) vulnerabilities occur when web applications include untrusted data in rendered pages without proper validation or escaping, allowing attackers to inject malicious scripts...',
                exampleAttacks: [
                    'Reflected XSS through search parameters',
                    'Stored XSS in user profile data',
                    'DOM-based XSS in client-side rendering',
                    'XSS through SVG file upload'
                ],
                mitigation: [
                    'Use React built-in XSS protections',
                    'Implement Content Security Policy (CSP)',
                    'Sanitize user input with DOMPurify',
                    'Validate and encode output data',
                    'Use HttpOnly cookies for sensitive data'
                ],
                relatedCWEs: [
                    {
                        id: 'CWE-79',
                        name: 'Cross-Site Scripting (XSS)',
                        severity: 'HIGH',
                        description: 'The web application includes unvalidated or unencoded user input as part of HTML output...',
                        link: 'https://cwe.mitre.org/data/definitions/79.html'
                    },
                    {
                        id: 'CWE-116',
                        name: 'Improper Encoding or Escaping of Output',
                        severity: 'HIGH',
                        description: 'The software does not properly encode or escape output, creating a vulnerability to XSS attacks...',
                        link: 'https://cwe.mitre.org/data/definitions/116.html'
                    }
                ]
            }
        ],
        
        affectedRepository: 'github.com/acme/admin-dashboard',
        teamOwner: 'FRONTEND',
        affectedComponent: 'SearchComponent',
        affectedVersion: '1.5.0',
        
        impactedPolicies: ['SEC-005', 'SEC-006'],
        remediationPlan: 'Implement proper input sanitization and CSP headers',
        applicabilityAssessment: {
            isApplicable: true,
            justification: 'XSS vulnerabilities confirmed in multiple components. While some are mitigated by React\'s built-in protections, several instances bypass these controls through dangerous props and direct DOM manipulation.',
            assessedBy: 'Rachel Green',
            assessedDate: getRelativeDate(-1),
            systemAnalysis: [
                {
                    systemName: 'admin-dashboard/SearchResults',
                    vulnerableVersion: '1.2.0',
                    ourVersion: '1.2.0',
                    environment: 'production',
                    isAffected: true,
                    reason: 'Direct DOM manipulation bypassing React sanitization'
                },
                {
                    systemName: 'admin-dashboard/SearchInput',
                    vulnerableVersion: '1.2.0',
                    ourVersion: '1.2.0',
                    buildFlags: ['dangerouslySetInnerHTML=true'],
                    environment: 'production',
                    isAffected: true,
                    reason: 'Using dangerouslySetInnerHTML without sanitization'
                },
                {
                    systemName: 'admin-dashboard/RichTextEditor',
                    vulnerableVersion: '1.2.0',
                    ourVersion: '1.2.0',
                    buildFlags: ['sanitize=true', 'dompurify=enabled'],
                    environment: 'production',
                    isAffected: false,
                    reason: 'DOMPurify sanitization enabled for user content'
                }
            ]
        },
        complianceImpact: {
            auditRisk: 'HIGH',
            nextAuditDate: getRelativeDate(31), // ~1 month from now
            primaryFramework: 'PCI-DSS',
            controlIds: ['Requirement 6.5.7', 'Requirement 6.6'],
            nextSteps: {
                technical: [
                    'Remove all dangerouslySetInnerHTML usage',
                    'Implement DOMPurify for HTML sanitization',
                    'Configure strict CSP headers',
                    'Add XSS protection middleware'
                ],
                process: [
                    'Update frontend security guidelines',
                    'Review all React components for XSS vectors',
                    'Train developers on secure React patterns'
                ],
                documentation: [
                    'Document safe HTML rendering patterns',
                    'Update CSP configuration guide',
                    'Create XSS prevention checklist'
                ],
                timeline: getRelativeDate(14),
                owner: 'Frontend Security Team'
            }
        },
        remediationDetails: {
            jiraTicket: {
                id: 'SEC-1238',
                url: 'https://acme.atlassian.net/browse/SEC-1238',
                status: 'In Review'
            },
            pullRequest: {
                id: '234',
                url: 'https://github.com/acme/admin-dashboard/pull/234',
                status: 'Draft'
            }
        },
    },
    {
        id: 'VUL-006',
        title: 'Insecure Infrastructure Configuration',
        description: 'Public S3 bucket with sensitive data exposure risk',
        severity: 'CRITICAL',
        status: 'IN_REVIEW',
        dateIdentified: getRelativeDate(-8),
        dateUpdated: getRelativeDate(-2),
        
        sourceTools: ['GITLAB'],
        
        affectedRepository: 'github.com/acme/infrastructure-as-code',
        teamOwner: 'DEVOPS',
        affectedComponent: 'StorageConfig',
        affectedVersion: '2.0.0',
        
        applicabilityAssessment: {
            isApplicable: true,
            justification: 'Confirmed public access to production bucket',
            assessedBy: 'Sarah Connor',
            assessedDate: getRelativeDate(-2),
            systemAnalysis: [
                {
                    systemName: 'payment-service',
                    vulnerableVersion: '1.0.0',
                    ourVersion: '1.0.0',
                    environment: 'production',
                    isAffected: true,
                    reason: 'Vulnerable code present in production deployment'
                }
            ]
        },
        
        impactedPolicies: ['SEC-001', 'SEC-007'],
        remediationPlan: 'Implement proper bucket policies and encryption',
        toolOutputs: [
            {
                toolName: 'GITLAB',
                summary: 'Public S3 bucket with sensitive data exposure',
                vulnerabilityType: 'Cloud Misconfiguration',
                location: {
                    repository: 'github.com/acme/infrastructure-as-code',
                    filePath: 'terraform/storage/s3.tf',
                    lineNumber: 23,
                    codeSnippet: 'acl = "public-read"'
                },
                recommendation: 'Remove public access and implement proper bucket policies',
                detectionDate: getRelativeDate(-8)
            },
            {
                toolName: 'AWS Config',
                summary: 'S3 bucket encryption not enabled',
                vulnerabilityType: 'Encryption Missing',
                location: {
                    repository: 'github.com/acme/infrastructure-as-code',
                    filePath: 'terraform/storage/s3.tf',
                    lineNumber: 45
                },
                recommendation: 'Enable S3 bucket encryption using AWS KMS',
                detectionDate: getRelativeDate(-8)
            }
        ],
        cveData: [{
            id: 'CVE-2023-47264',
            name: 'AWS S3 Data Exposure',
            summary: 'Misconfigured S3 bucket permissions leading to data exposure',
            publishDate: '2023-11-15',
            cvssScore: 8.2,
            cvssSeverity: 'HIGH',
            cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N',
            impactedSystems: [
                {
                    name: 'aws-sdk',
                    version: '2.1234.0',
                    library: 'npm'
                },
                {
                    name: '@aws-sdk/client-s3',
                    version: '3.272.0',
                    library: 'npm'
                },
                {
                    name: 'terraform-aws-modules/s3-bucket/aws',
                    version: '3.7.0',
                    library: 'terraform'
                }
            ]
        }],
        owaspCategories: [
            {
                id: 'A05:2021',
                name: 'Security Misconfiguration',
                summary: 'Cloud infrastructure misconfigurations can lead to unauthorized access and data exposure',
                description: 'Security misconfiguration in cloud services can expose sensitive data and resources to unauthorized access. This includes improper access controls, default configurations, and missing security hardening...',
                exampleAttacks: [
                    'Public access to sensitive S3 buckets',
                    'Missing encryption for data at rest',
                    'Overly permissive IAM roles',
                    'Default security group settings'
                ],
                mitigation: [
                    'Implement least privilege access',
                    'Enable encryption by default',
                    'Regular security configuration audits',
                    'Use infrastructure as code security scanning',
                    'Implement proper bucket policies and ACLs'
                ],
                relatedCWEs: [
                    {
                        id: 'CWE-16',
                        name: 'Configuration',
                        severity: 'HIGH',
                        description: 'System security settings and configurations are not properly set and maintained...',
                        link: 'https://cwe.mitre.org/data/definitions/16.html'
                    },
                    {
                        id: 'CWE-732',
                        name: 'Incorrect Permission Assignment for Critical Resource',
                        severity: 'HIGH',
                        description: 'The application assigns improper permissions to critical cloud resources, allowing unauthorized access...',
                        link: 'https://cwe.mitre.org/data/definitions/732.html'
                    }
                ]
            }
        ],
        complianceImpact: {
            auditRisk: 'HIGH',
            nextAuditDate: getRelativeDate(31), // ~1 month from now
            primaryFramework: 'PCI-DSS',
            controlIds: ['Requirement 2.2', 'Requirement 7.2.1'],
            nextSteps: {
                technical: [
                    'Implement S3 bucket encryption',
                    'Configure proper bucket policies',
                    'Enable access logging',
                    'Set up CloudWatch alerts for public access'
                ],
                process: [
                    'Update cloud resource provisioning process',
                    'Implement infrastructure security review gates',
                    'Create cloud security monitoring procedures'
                ],
                documentation: [
                    'Update cloud security architecture diagrams',
                    'Document S3 bucket security requirements',
                    'Create cloud resource security checklist'
                ],
                timeline: getRelativeDate(14),
                owner: 'Cloud Security Team'
            }
        },
        remediationDetails: {
            jiraTicket: {
                id: 'SEC-1239',
                url: 'https://acme.atlassian.net/browse/SEC-1239',
                status: 'In Progress'
            },
            pullRequest: {
                id: '567',
                url: 'https://github.com/acme/infrastructure-as-code/pull/567',
                status: 'Merged'
            }
        },
    },
    {
        id: 'VUL-007',
        title: 'Dependency with Known Vulnerabilities',
        description: 'Multiple high-severity vulnerabilities in outdated npm packages',
        severity: 'HIGH',
        status: 'OPEN',
        dateIdentified: getRelativeDate(-12),
        dateUpdated: getRelativeDate(-12),
        
        sourceTools: ['SNYK'],
        
        affectedRepository: 'github.com/acme/frontend-components',
        teamOwner: 'FRONTEND',
        affectedComponent: 'node_modules',
        affectedVersion: 'various',
        
        impactedPolicies: ['SEC-002', 'SEC-008'],
        remediationPlan: 'Update all outdated dependencies to latest secure versions',
        cveData: [{
            id: 'CVE-2023-45133',
            name: 'Prototype Pollution in lodash',
            summary: 'Prototype pollution vulnerability in lodash before 4.17.21',
            publishDate: '2023-09-15',
            cvssScore: 7.1,
            cvssSeverity: 'HIGH',
            cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:H/A:L',
            impactedSystems: [
                {
                    name: 'lodash',
                    version: '4.17.15',
                    library: 'npm'
                },
                {
                    name: '@types/lodash',
                    version: '4.14.170',
                    library: 'npm'
                }
            ]
        }, {
            id: 'CVE-2023-45586',
            name: 'RCE in node-tar',
            summary: 'Arbitrary code execution in node-tar package',
            publishDate: '2023-08-01',
            cvssScore: 8.6,
            cvssSeverity: 'HIGH',
            cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
            impactedSystems: [
                {
                    name: 'tar',
                    version: '6.1.11',
                    library: 'npm'
                },
                {
                    name: '@types/tar',
                    version: '6.1.3',
                    library: 'npm'
                }
            ]
        }],
        toolOutputs: [
            {
                toolName: 'SNYK',
                summary: 'Multiple high severity vulnerabilities in npm dependencies',
                vulnerabilityType: 'Dependency Chain',
                location: {
                    repository: 'github.com/acme/frontend-components',
                    filePath: 'package.json',
                    lineNumber: 15,
                    codeSnippet: '"lodash": "4.17.15",'
                },
                recommendation: 'Update lodash to version 4.17.21 or later',
                detectionDate: getRelativeDate(-12)
            },
            {
                toolName: 'SNYK',
                summary: 'Critical vulnerability in node-tar package',
                vulnerabilityType: 'Remote Code Execution',
                location: {
                    repository: 'github.com/acme/frontend-components',
                    filePath: 'package-lock.json',
                    lineNumber: 1247,
                    codeSnippet: '"tar": "6.1.11"'
                },
                recommendation: 'Update tar to version 6.1.13 or later',
                detectionDate: getRelativeDate(-12)
            }
        ],
        owaspCategories: [
            {
                id: 'A06:2021',
                name: 'Vulnerable and Outdated Components',
                summary: 'Using components with known vulnerabilities can lead to various attacks',
                description: 'Applications using outdated or vulnerable components (libraries, frameworks, software modules) can be exploited through known vulnerabilities, potentially leading to data loss or server takeover...',
                exampleAttacks: [
                    'Exploitation of known vulnerabilities in outdated libraries',
                    'Supply chain attacks through compromised dependencies',
                    'Automated scanning and exploitation of vulnerable versions',
                    'Dependency confusion attacks'
                ],
                mitigation: [
                    'Regular dependency updates and security patches',
                    'Automated dependency scanning in CI/CD',
                    'Maintain software bill of materials (SBOM)',
                    'Use dependency lock files',
                    'Implement automated vulnerability scanning'
                ],
                relatedCWEs: [
                    {
                        id: 'CWE-1104',
                        name: 'Use of Unmaintained Third Party Components',
                        severity: 'HIGH',
                        description: 'The product uses a third-party component that is no longer maintained, which could make it easier for attackers to exploit...',
                        link: 'https://cwe.mitre.org/data/definitions/1104.html'
                    },
                    {
                        id: 'CWE-937',
                        name: 'Using Components with Known Vulnerabilities',
                        severity: 'HIGH',
                        description: 'The application uses a component with a known vulnerability, which could allow an attacker to exploit this vulnerability...',
                        link: 'https://cwe.mitre.org/data/definitions/937.html'
                    }
                ]
            }
        ],
        applicabilityAssessment: {
            isApplicable: true,
            justification: 'Multiple vulnerable dependencies found across environments, with some critical components affected in production.',
            assessedBy: 'Sarah Connor',
            assessedDate: getRelativeDate(-5),
            systemAnalysis: [
                {
                    systemName: 'lodash',
                    vulnerableVersion: '4.17.15',
                    ourVersion: '4.17.15',
                    environment: 'production',
                    isAffected: true,
                    reason: 'Using vulnerable version in production'
                },
                {
                    systemName: 'node-tar',
                    vulnerableVersion: '6.1.11',
                    ourVersion: '6.1.11',
                    buildFlags: ['devDependencies=true'],
                    environment: 'development',
                    isAffected: false,
                    reason: 'Only used during development builds, not in production artifacts'
                },
                {
                    systemName: 'moment',
                    vulnerableVersion: '2.29.1',
                    ourVersion: '2.29.4',
                    environment: 'production',
                    isAffected: false,
                    reason: 'Already updated to patched version'
                }
            ]
        },
        complianceImpact: {
            auditRisk: 'HIGH',
            nextAuditDate: getRelativeDate(31), // ~1 month from now
            primaryFramework: 'SOC2',
            controlIds: ['CC8.1', 'CC7.1'],
            nextSteps: {
                technical: [
                    'Update lodash to version 4.17.21',
                    'Update node-tar to version 6.1.13',
                    'Implement automated dependency scanning in CI/CD',
                    'Configure Dependabot for automated updates'
                ],
                process: [
                    'Create dependency update review process',
                    'Implement emergency patch procedure',
                    'Define vulnerability remediation SLAs'
                ],
                documentation: [
                    'Generate and maintain SBOM',
                    'Document dependency update procedures',
                    'Update vulnerability management playbook'
                ],
                timeline: getRelativeDate(19), // ~3 weeks from now
                owner: 'Frontend Security Team'
            }
        },
        remediationDetails: {
            jiraTicket: {
                id: 'SEC-1240',
                url: 'https://acme.atlassian.net/browse/SEC-1240',
                status: 'Open'
            }
        },
    },
    {
        id: 'VUL-008',
        title: 'Insufficient Rate Limiting',
        description: 'API endpoints vulnerable to brute force attacks',
        severity: 'MEDIUM',
        status: 'OPEN',
        dateIdentified: getRelativeDate(-20),
        dateUpdated: getRelativeDate(-15),
        
        sourceTools: ['COVERITY'],
        
        affectedRepository: 'github.com/acme/api-gateway',
        teamOwner: 'PLATFORM',
        affectedComponent: 'RateLimiter',
        affectedVersion: '1.0.0',
        
        impactedPolicies: ['SEC-001', 'SEC-009'],
        remediationPlan: 'Implement proper rate limiting across all endpoints',
        toolOutputs: [
            {
                toolName: 'COVERITY',
                summary: 'Missing rate limiting controls on authentication endpoints',
                vulnerabilityType: 'Security Misconfiguration',
                location: {
                    repository: 'github.com/acme/api-gateway',
                    filePath: 'src/middleware/rate-limiter.ts',
                    lineNumber: 34,
                    codeSnippet: 'app.use("/api/auth/*", authMiddleware);  // No rate limiting'
                },
                recommendation: 'Implement rate limiting using express-rate-limit or similar middleware',
                detectionDate: getRelativeDate(-20)
            }
        ],
        cveData: [{
            id: 'CVE-2023-44721',
            name: 'Rate Limiting Bypass in Express Gateway',
            summary: 'Missing rate limiting controls allow brute force attacks',
            publishDate: '2023-10-25',
            cvssScore: 7.5,
            cvssSeverity: 'HIGH',
            cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L',
            impactedSystems: [
                {
                    name: 'express',
                    version: '4.17.1',
                    library: 'npm'
                },
                {
                    name: 'express-rate-limit',
                    version: '5.5.0',
                    library: 'npm'
                },
                {
                    name: '@nestjs/throttler',
                    version: '2.0.0',
                    library: 'npm'
                },
                {
                    name: 'rate-limiter-flexible',
                    version: '2.3.6',
                    library: 'npm'
                }
            ]
        }],
        owaspCategories: [
            {
                id: 'A04:2021',
                name: 'Insecure Design',
                summary: 'Missing rate limiting controls can lead to automated attacks',
                description: 'Lack of rate limiting allows attackers to perform unlimited authentication attempts, API calls, or resource requests, potentially leading to account takeover, denial of service, or data scraping...',
                exampleAttacks: [
                    'Credential stuffing attacks on login endpoints',
                    'Brute force password attempts',
                    'API abuse and data scraping',
                    'DoS through excessive requests'
                ],
                mitigation: [
                    'Implement rate limiting on all public endpoints',
                    'Use token bucket or sliding window algorithms',
                    'Add CAPTCHA for repeated failed attempts',
                    'Monitor and alert on unusual request patterns',
                    'Implement IP-based and user-based throttling'
                ],
                relatedCWEs: [
                    {
                        id: 'CWE-307',
                        name: 'Improper Restriction of Excessive Authentication Attempts',
                        severity: 'HIGH',
                        description: 'The software does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame...',
                        link: 'https://cwe.mitre.org/data/definitions/307.html'
                    },
                    {
                        id: 'CWE-799',
                        name: 'Improper Control of Interaction Frequency',
                        severity: 'MEDIUM',
                        description: 'The software does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests...',
                        link: 'https://cwe.mitre.org/data/definitions/799.html'
                    }
                ]
            }
        ],
        applicabilityAssessment: {
            isApplicable: false,
            justification: 'While rate limiting controls are missing in the code, AWS WAF rules provide protection in production and staging.',
            assessedBy: 'Bob Wilson',
            assessedDate: getRelativeDate(-15),
            systemAnalysis: [
                {
                    systemName: 'express-rate-limit',
                    vulnerableVersion: '5.5.0',
                    ourVersion: '5.5.0',
                    buildFlags: ['enabled=false'],
                    environment: 'production',
                    isAffected: false,
                    reason: 'Rate limiting handled by AWS WAF, application-level limiting disabled'
                },
                {
                    systemName: '@nestjs/throttler',
                    vulnerableVersion: '2.0.0',
                    ourVersion: '2.0.0',
                    environment: 'development',
                    isAffected: false,
                    reason: 'Development environment does not require rate limiting'
                }
            ]
        },
        complianceImpact: {
            auditRisk: 'HIGH',
            nextAuditDate: getRelativeDate(31), // ~1 month from now
            primaryFramework: 'PCI-DSS',
            controlIds: ['Requirement 6.5.10', 'Requirement 7.1'],
            nextSteps: {
                technical: [
                    'Implement rate limiting middleware',
                    'Configure AWS WAF rate rules',
                    'Add CAPTCHA for authentication endpoints',
                    'Set up monitoring for API abuse'
                ],
                process: [
                    'Define rate limiting thresholds',
                    'Create incident response for API abuse',
                    'Establish API security review process'
                ],
                documentation: [
                    'Document rate limiting architecture',
                    'Update API security controls matrix',
                    'Create API abuse playbook'
                ],
                timeline: getRelativeDate(29), // ~1 month from now
                owner: 'Platform Security Team'
            }
        },
        remediationDetails: {
            jiraTicket: {
                id: 'SEC-1241',
                url: 'https://acme.atlassian.net/browse/SEC-1241',
                status: 'Open'
            }
        },
    },
    {
        id: 'VUL-009',
        title: 'Security Misconfiguration in WAF',
        description: 'Web Application Firewall rules not properly configured',
        severity: 'HIGH',
        status: 'IN_REVIEW',
        dateIdentified: getRelativeDate(-15),
        dateUpdated: getRelativeDate(-2),
        
        sourceTools: ['GITLAB'],
        
        affectedRepository: 'github.com/acme/security-configs',
        teamOwner: 'SECURITY',
        affectedComponent: 'WAFConfig',
        affectedVersion: '2.1.0',
        impactedPolicies: ['SEC-001', 'SEC-010'],
        remediationPlan: 'Update WAF rules and implement proper security controls',
        toolOutputs: [
            {
                toolName: 'GITLAB',
                summary: 'Missing WAF rules for common attack patterns',
                vulnerabilityType: 'WAF Misconfiguration',
                location: {
                    repository: 'github.com/acme/security-configs',
                    filePath: 'waf/rules/custom-rules.tf',
                    lineNumber: 156,
                    codeSnippet: 'managed_rules = []  # Empty WAF rule set'
                },
                recommendation: 'Enable AWS WAF managed rule sets for common vulnerabilities',
                detectionDate: getRelativeDate(-15)
            },
            {
                toolName: 'AWS Config',
                summary: 'WAF logging not enabled for critical endpoints',
                vulnerabilityType: 'Logging Misconfiguration',
                location: {
                    repository: 'github.com/acme/security-configs',
                    filePath: 'waf/logging/waf-logging.tf',
                    lineNumber: 23
                },
                recommendation: 'Enable WAF logging and integrate with CloudWatch',
                detectionDate: getRelativeDate(-15)
            }
        ],
        cveData: [{
            id: 'CVE-2023-42156',
            name: 'AWS WAF Rule Bypass',
            summary: 'Misconfigured WAF rules allow bypass of security controls',
            publishDate: '2023-09-28',
            cvssScore: 7.4,
            cvssSeverity: 'HIGH',
            cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L',
            impactedSystems: [
                {
                    name: 'aws-waf',
                    version: '2.5.0',
                    library: 'aws-sdk'
                },
                {
                    name: '@aws-sdk/client-wafv2',
                    version: '3.370.0',
                    library: 'npm'
                },
                {
                    name: 'terraform-aws-modules/waf/aws',
                    version: '2.3.0',
                    library: 'terraform'
                }
            ]
        }],
        owaspCategories: [
            {
                id: 'A05:2021',
                name: 'Security Misconfiguration',
                summary: 'WAF misconfigurations can lead to bypass of security controls',
                description: 'Improper WAF configuration can allow attackers to bypass security controls. This includes missing rules, improper rule ordering, and inadequate logging...',
                exampleAttacks: [
                    'WAF rule bypass using encoded payloads',
                    'SQL injection through misconfigured rules',
                    'XSS attacks through unprotected endpoints',
                    'HTTP protocol violation attacks'
                ],
                mitigation: [
                    'Enable AWS WAF managed rule sets',
                    'Implement custom rules for specific threats',
                    'Configure proper rule ordering and priorities',
                    'Enable comprehensive WAF logging',
                    'Regular testing of WAF effectiveness'
                ],
                relatedCWEs: [
                    {
                        id: 'CWE-942',
                        name: 'Permissive Cross-domain Policy with Untrusted Domains',
                        severity: 'HIGH',
                        description: 'The web application specifies a permissive cross-domain policy that allows access from untrusted domains...',
                        link: 'https://cwe.mitre.org/data/definitions/942.html'
                    },
                    {
                        id: 'CWE-943',
                        name: 'Improper Neutralization of Special Elements in Data Query Logic',
                        severity: 'HIGH',
                        description: 'The application\'s WAF fails to properly neutralize or incorrectly neutralizes special elements that could modify query logic...',
                        link: 'https://cwe.mitre.org/data/definitions/943.html'
                    }
                ]
            }
        ],
        applicabilityAssessment: {
            isApplicable: true,
            justification: 'WAF misconfiguration affects production and staging environments. While some rules are handled by CloudFront, critical custom rules are missing.',
            assessedBy: 'Alice Johnson',
            assessedDate: getRelativeDate(-2),
            systemAnalysis: [
                {
                    systemName: 'aws-waf',
                    vulnerableVersion: '2.5.0',
                    ourVersion: '2.5.0',
                    environment: 'production',
                    isAffected: true,
                    reason: 'Missing managed rule sets in production WAF configuration'
                },
                {
                    systemName: '@aws-sdk/client-wafv2',
                    vulnerableVersion: '3.370.0',
                    ourVersion: '3.370.0',
                    environment: 'staging',
                    isAffected: true,
                    reason: 'Custom rules not properly configured in staging'
                },
                {
                    systemName: 'terraform-aws-modules/waf/aws',
                    vulnerableVersion: '2.3.0',
                    ourVersion: '2.3.0',
                    buildFlags: ['logging=disabled'],
                    environment: 'production',
                    isAffected: true,
                    reason: 'WAF logging disabled in production environment'
                }
            ]
        },
        complianceImpact: {
            auditRisk: 'HIGH',
            nextAuditDate: getRelativeDate(31), // ~1 month from now
            primaryFramework: 'PCI-DSS',
            controlIds: ['Requirement 6.6', 'Requirement 10.2'],
            nextSteps: {
                technical: [
                    'Enable AWS WAF managed rule sets',
                    'Configure custom rules for specific threats',
                    'Enable WAF logging to CloudWatch',
                    'Implement real-time WAF monitoring alerts'
                ],
                process: [
                    'Create WAF change management process',
                    'Establish WAF rule review schedule',
                    'Define WAF monitoring procedures'
                ],
                documentation: [
                    'Update WAF configuration standards',
                    'Document WAF rule management process',
                    'Create WAF monitoring playbook'
                ],
                timeline: getRelativeDate(14), // 2 weeks from now
                owner: 'Security Operations Team'
            }
        },
        remediationDetails: {
            jiraTicket: {
                id: 'SEC-1242',
                url: 'https://acme.atlassian.net/browse/SEC-1242',
                status: 'In Review'
            },
            pullRequest: {
                id: '890',
                url: 'https://github.com/acme/security-configs/pull/890',
                status: 'Under Review'
            }
        },
    }
]; 