import { getRelativeDate } from "@/app/utils/date-utils"

export type SecurityTool = 'COVERITY' | 'SNYK' | 'GITLAB' | 'BLACKDUCK';
export type VulnerabilityStatus = 'OPEN' | 'IN_REVIEW' | 'NOT_APPLICABLE' | 'FIXED' | 'ACCEPTED_RISK';
export type VulnerabilitySeverity = 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';
export type TeamOwnership = 'PLATFORM' | 'FRONTEND' | 'BACKEND' | 'DEVOPS' | 'SECURITY' | 'UNKNOWN';

export interface SecurityToolInfo {
    id: SecurityTool;
    name: string;
    description: string;
    purpose: string;
    lastScan?: string;
}

export interface ComplianceFramework {
    id: string;
    name: string;
    description: string;
    link: string;
}

export interface CompliancePolicy {
    id: string;
    name: string;
    description: string;
    policyText: string;
    policyLink: string;
    policyCode: string;
    frameworks: string[];
    businessImpact: string;
}

export interface Vulnerability {
    id: string;
    title: string;
    description: string;
    severity: VulnerabilitySeverity;
    status: VulnerabilityStatus;
    dateIdentified: string;
    dateUpdated: string;
    
    // Source Information
    sourceTools: SecurityTool[];
    cveId?: string;
    owaspCategory?: string;
    
    // Technical Details
    affectedRepository: string;
    teamOwner: TeamOwnership;
    affectedComponent: string;
    affectedVersion: string;
    buildFlags?: string[];
    
    // Assessment
    applicabilityAssessment?: {
        isApplicable: boolean;
        justification?: string;
        assessedBy?: string;
        assessedDate?: string;
    };
    
    // Impact Analysis
    impactedPolicies: string[]; // References to CompliancePolicy ids
    remediationPlan?: string;
    workaround?: string;
}

// Security Tool Definitions
export const securityTools: SecurityToolInfo[] = [
    {
        id: 'COVERITY',
        name: 'Coverity',
        description: 'Static Application Security Testing (SAST) tool',
        purpose: 'Analyzes source code for security vulnerabilities, coding defects, and compliance issues',
        lastScan: getRelativeDate(-1)
    },
    {
        id: 'SNYK',
        name: 'Snyk',
        description: 'Software Composition Analysis (SCA) tool',
        purpose: 'Scans dependencies for known vulnerabilities and license compliance issues',
        lastScan: getRelativeDate(-2)
    },
    {
        id: 'GITLAB',
        name: 'GitLab Security Scanning',
        description: 'Built-in security scanning tools in GitLab',
        purpose: 'Provides SAST, DAST, container scanning, and dependency scanning',
        lastScan: getRelativeDate(-1)
    },
    {
        id: 'BLACKDUCK',
        name: 'Black Duck',
        description: 'Software Composition Analysis (SCA) tool',
        purpose: 'Manages open source security, license compliance, and code quality',
        lastScan: getRelativeDate(-3)
    }
];

// Compliance Frameworks
export const complianceFrameworks: ComplianceFramework[] = [
    {
        id: 'SOC2',
        name: 'SOC 2',
        description: 'Service Organization Control 2',
        link: 'https://www.aicpa.org/soc2'
    },
    {
        id: 'PCI',
        name: 'PCI DSS',
        description: 'Payment Card Industry Data Security Standard',
        link: 'https://www.pcisecuritystandards.org'
    },
    {
        id: 'HIPAA',
        name: 'HIPAA',
        description: 'Health Insurance Portability and Accountability Act',
        link: 'https://www.hhs.gov/hipaa'
    }
];

// Compliance Policies
export const compliancePolicies: CompliancePolicy[] = [
    {
        id: 'SEC-001',
        name: 'Secure Software Development',
        policyCode: 'POL-SEC-001',
        policyLink: 'https://policies.acme.com/security/secure-development',
        description: 'Policy for secure software development practices',
        policyText: 'All software must undergo security testing before deployment...',
        frameworks: ['SOC2', 'PCI'],
        businessImpact: 'Failure to follow secure development practices may result in data breaches and compliance violations'
    },
    {
        id: 'SEC-002',
        name: 'Vulnerability Management',
        description: 'Policy for managing security vulnerabilities',
        policyText: 'All critical and high vulnerabilities must be remediated within 30 days...',
        policyLink: 'https://policies.acme.com/security/vulnerability-management',
        policyCode: 'POL-VUL-001',
        frameworks: ['SOC2', 'PCI', 'HIPAA'],
        businessImpact: 'Unpatched vulnerabilities may lead to system compromise and data breaches'
    }
];

// Sample Vulnerabilities
export const vulnerabilities: Vulnerability[] = [
    {
        id: 'VUL-001',
        title: 'SQL Injection in User Authentication',
        description: 'Potential SQL injection vulnerability in login endpoint',
        severity: 'CRITICAL',
        status: 'OPEN',
        dateIdentified: getRelativeDate(-10),
        dateUpdated: getRelativeDate(-5),
        
        sourceTools: ['COVERITY', 'GITLAB'],
        cveId: 'CVE-2023-1234',
        owaspCategory: 'A03:2021-Injection',
        
        affectedRepository: 'github.com/acme/auth-service',
        teamOwner: 'BACKEND',
        affectedComponent: 'UserAuthenticationService',
        affectedVersion: '2.1.0',
        buildFlags: ['--with-security=true'],
        
        applicabilityAssessment: {
            isApplicable: true,
            justification: 'Confirmed vulnerability in production code',
            assessedBy: 'John Smith',
            assessedDate: getRelativeDate(-5)
        },
        
        impactedPolicies: ['SEC-001', 'SEC-002'],
        remediationPlan: 'Implement prepared statements and input validation',
        workaround: 'Enable WAF rules to block SQL injection attempts'
    },
    {
        id: 'VUL-002',
        title: 'Outdated Log4j Version',
        description: 'Using vulnerable version of Log4j library',
        severity: 'CRITICAL',
        status: 'IN_REVIEW',
        dateIdentified: getRelativeDate(-15),
        dateUpdated: getRelativeDate(-2),
        
        sourceTools: ['SNYK', 'BLACKDUCK'],
        cveId: 'CVE-2021-44228',
        
        affectedRepository: 'github.com/acme/payment-service',
        teamOwner: 'PLATFORM',
        affectedComponent: 'log4j-core',
        affectedVersion: '2.14.1',
        
        applicabilityAssessment: {
            isApplicable: false,
            justification: 'Vulnerable class is not used in our implementation',
            assessedBy: 'Jane Doe',
            assessedDate: getRelativeDate(-2)
        },
        
        impactedPolicies: ['SEC-002'],
        remediationPlan: 'Upgrade to Log4j 2.17.0 or higher'
    },
    {
        id: 'VUL-003',
        title: 'Insecure Deserialization',
        description: 'Unsafe deserialization of user-supplied content',
        severity: 'HIGH',
        status: 'OPEN',
        dateIdentified: getRelativeDate(-20),
        dateUpdated: getRelativeDate(-20),
        
        sourceTools: ['COVERITY'],
        owaspCategory: 'A08:2021-Software and Data Integrity Failures',
        
        affectedRepository: 'github.com/acme/legacy-app',
        teamOwner: 'UNKNOWN',
        affectedComponent: 'DataProcessor',
        affectedVersion: '1.0.0',
        
        impactedPolicies: ['SEC-001'],
        remediationPlan: 'Implement safe deserialization practices'
    },
    {
        id: 'VUL-004',
        title: 'Cross-Site Scripting in Dashboard',
        description: 'Reflected XSS vulnerability in dashboard search component',
        severity: 'HIGH',
        status: 'IN_REVIEW',
        dateIdentified: getRelativeDate(-5),
        dateUpdated: getRelativeDate(-1),
        
        sourceTools: ['GITLAB'],
        owaspCategory: 'A03:2021-Cross-Site Scripting',
        
        affectedRepository: 'github.com/acme/admin-dashboard',
        teamOwner: 'FRONTEND',
        affectedComponent: 'SearchComponent',
        affectedVersion: '1.5.0',
        
        impactedPolicies: ['SEC-001'],
        remediationPlan: 'Implement proper input sanitization and CSP headers'
    },
    {
        id: 'VUL-005',
        title: 'Insecure Infrastructure Configuration',
        description: 'Public S3 bucket with sensitive data exposure risk',
        severity: 'CRITICAL',
        status: 'IN_REVIEW',
        dateIdentified: getRelativeDate(-8),
        dateUpdated: getRelativeDate(-2),
        
        sourceTools: ['GITLAB'],
        
        affectedRepository: 'github.com/acme/infrastructure-as-code',
        teamOwner: 'DEVOPS',
        affectedComponent: 'StorageConfig',
        affectedVersion: '2.0.0',
        
        applicabilityAssessment: {
            isApplicable: true,
            justification: 'Confirmed public access to production bucket',
            assessedBy: 'Sarah Connor',
            assessedDate: getRelativeDate(-2)
        },
        
        impactedPolicies: ['SEC-001', 'SEC-002'],
        remediationPlan: 'Implement proper bucket policies and encryption'
    },
    {
        id: 'VUL-006',
        title: 'Dependency with Known Vulnerabilities',
        description: 'Multiple high-severity vulnerabilities in outdated npm packages',
        severity: 'HIGH',
        status: 'OPEN',
        dateIdentified: getRelativeDate(-12),
        dateUpdated: getRelativeDate(-12),
        
        sourceTools: ['SNYK'],
        
        affectedRepository: 'github.com/acme/frontend-components',
        teamOwner: 'FRONTEND',
        affectedComponent: 'node_modules',
        affectedVersion: 'various',
        
        impactedPolicies: ['SEC-002'],
        remediationPlan: 'Update all outdated dependencies to latest secure versions'
    },
    {
        id: 'VUL-007',
        title: 'Insufficient Rate Limiting',
        description: 'API endpoints vulnerable to brute force attacks',
        severity: 'MEDIUM',
        status: 'OPEN',
        dateIdentified: getRelativeDate(-20),
        dateUpdated: getRelativeDate(-15),
        
        sourceTools: ['COVERITY'],
        
        affectedRepository: 'github.com/acme/api-gateway',
        teamOwner: 'PLATFORM',
        affectedComponent: 'RateLimiter',
        affectedVersion: '1.0.0',
        
        impactedPolicies: ['SEC-001'],
        remediationPlan: 'Implement proper rate limiting across all endpoints'
    },
    {
        id: 'VUL-008',
        title: 'Hardcoded Credentials',
        description: 'API keys found in source code repository',
        severity: 'CRITICAL',
        status: 'FIXED',
        dateIdentified: getRelativeDate(-25),
        dateUpdated: getRelativeDate(-1),
        
        sourceTools: ['GITLAB'],
        
        affectedRepository: 'github.com/acme/legacy-service',
        teamOwner: 'UNKNOWN',
        affectedComponent: 'ConfigService',
        affectedVersion: '1.0.0',
        
        applicabilityAssessment: {
            isApplicable: true,
            justification: 'Credentials were active and exposed',
            assessedBy: 'John Smith',
            assessedDate: getRelativeDate(-24)
        },
        
        impactedPolicies: ['SEC-001', 'SEC-002'],
        remediationPlan: 'Remove hardcoded credentials and rotate all exposed keys'
    },
    {
        id: 'VUL-009',
        title: 'Security Misconfiguration in WAF',
        description: 'Web Application Firewall rules not properly configured',
        severity: 'HIGH',
        status: 'IN_REVIEW',
        dateIdentified: getRelativeDate(-15),
        dateUpdated: getRelativeDate(-2),
        
        sourceTools: ['GITLAB'],
        
        affectedRepository: 'github.com/acme/security-configs',
        teamOwner: 'SECURITY',
        affectedComponent: 'WAFConfig',
        affectedVersion: '2.1.0',
        
        impactedPolicies: ['SEC-001'],
        remediationPlan: 'Update WAF rules and implement proper security controls'
    }
]; 