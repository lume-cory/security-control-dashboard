import { Badge } from "@/subframe/components/Badge"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Textarea } from "@/components/ui/textarea"
import { Button } from "@/subframe/components/Button"
import { type Vulnerability } from "../../data/vulnerability-data"
import { compliancePolicies, complianceFrameworks, securityTools } from "../../data/vulnerability-data"

interface VulnerabilityDetailsProps {
    vulnerability: Vulnerability;
}

export function VulnerabilityDetails({ vulnerability }: VulnerabilityDetailsProps) {
    const getStatusBadgeVariant = (status: string) => {
        switch (status) {
            case 'OPEN': return 'error'
            case 'IN_REVIEW': return 'warning'
            case 'NOT_APPLICABLE': return 'neutral'
            case 'FIXED': return 'success'
            case 'ACCEPTED_RISK': return 'brand'
            default: return 'neutral'
        }
    }

    const getSeverityBadgeVariant = (severity: string) => {
        switch (severity) {
            case 'CRITICAL': return 'error'
            case 'HIGH': return 'error'
            case 'MEDIUM': return 'warning'
            case 'LOW': return 'success'
            default: return 'neutral'
        }
    }

    return (
        <div className="space-y-6">
            {/* Header Information */}
            <div>
                <div className="flex items-center gap-2 mb-2">
                    <h2 className="text-2xl font-bold">{vulnerability.title}</h2>
                    <Badge variant={getSeverityBadgeVariant(vulnerability.severity)}>
                        {vulnerability.severity}
                    </Badge>
                    <Badge variant={getStatusBadgeVariant(vulnerability.status)}>
                        {vulnerability.status.replace('_', ' ')}
                    </Badge>
                </div>
                <p className="text-muted-foreground">{vulnerability.description}</p>
            </div>

            {/* Source Information */}
            <Card>
                <CardHeader>
                    <CardTitle>Source Information</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                    <div>
                        <h4 className="font-semibold mb-2">Detection Tools</h4>
                        <div className="flex flex-wrap gap-2">
                            {vulnerability.sourceTools.map(toolId => {
                                const tool = securityTools.find(t => t.id === toolId)
                                return (
                                    <div key={toolId} className="border rounded-lg p-3 flex-1">
                                        <div className="flex items-center justify-between mb-1">
                                            <span className="font-medium">{tool?.name}</span>
                                            <Badge variant="neutral">{`Last Scan: ${tool?.lastScan || 'N/A'}`}</Badge>
                                        </div>
                                        <p className="text-sm text-muted-foreground">{tool?.purpose || 'No description available'}</p>
                                    </div>
                                )
                            })}
                        </div>
                    </div>
                    {vulnerability.cveId && (
                        <div>
                            <h4 className="font-semibold mb-2">CVE Reference</h4>
                            <Badge variant="error">{vulnerability.cveId}</Badge>
                        </div>
                    )}
                    {vulnerability.owaspCategory && (
                        <div>
                            <h4 className="font-semibold mb-2">OWASP Category</h4>
                            <Badge variant="brand">{vulnerability.owaspCategory}</Badge>
                        </div>
                    )}
                </CardContent>
            </Card>

            {/* Technical Details */}
            <Card>
                <CardHeader>
                    <CardTitle>Technical Details</CardTitle>
                </CardHeader>
                <CardContent>
                    <Table>
                        <TableBody>
                            <TableRow>
                                <TableCell className="font-medium">Repository</TableCell>
                                <TableCell>{vulnerability.affectedRepository}</TableCell>
                            </TableRow>
                            <TableRow>
                                <TableCell className="font-medium">Team Owner</TableCell>
                                <TableCell>{vulnerability.teamOwner}</TableCell>
                            </TableRow>
                            <TableRow>
                                <TableCell className="font-medium">Affected Component</TableCell>
                                <TableCell>{vulnerability.affectedComponent}</TableCell>
                            </TableRow>
                            <TableRow>
                                <TableCell className="font-medium">Version</TableCell>
                                <TableCell>{vulnerability.affectedVersion}</TableCell>
                            </TableRow>
                            {vulnerability.buildFlags && (
                                <TableRow>
                                    <TableCell className="font-medium">Build Flags</TableCell>
                                    <TableCell>
                                        <div className="flex flex-wrap gap-1">
                                            {vulnerability.buildFlags.map(flag => (
                                                <Badge key={flag} variant="neutral">{flag}</Badge>
                                            ))}
                                        </div>
                                    </TableCell>
                                </TableRow>
                            )}
                        </TableBody>
                    </Table>
                </CardContent>
            </Card>

            {/* Applicability Assessment */}
            <Card>
                <CardHeader>
                    <CardTitle>Applicability Assessment</CardTitle>
                </CardHeader>
                <CardContent>
                    {vulnerability.applicabilityAssessment ? (
                        <div className="space-y-4">
                            <div className="flex items-center gap-2">
                                <span className="font-medium">Status:</span>
                                <Badge variant={vulnerability.applicabilityAssessment.isApplicable ? 'error' : 'success'}>
                                    {vulnerability.applicabilityAssessment.isApplicable ? 'Applicable' : 'Not Applicable'}
                                </Badge>
                            </div>
                            {vulnerability.applicabilityAssessment.justification && (
                                <div>
                                    <span className="font-medium">Justification:</span>
                                    <p className="mt-1 text-muted-foreground">
                                        {vulnerability.applicabilityAssessment.justification}
                                    </p>
                                </div>
                            )}
                            <div className="text-sm text-muted-foreground">
                                Assessed by {vulnerability.applicabilityAssessment.assessedBy} on {vulnerability.applicabilityAssessment.assessedDate}
                            </div>
                        </div>
                    ) : (
                        <div className="space-y-4">
                            <p className="text-muted-foreground">No assessment has been made yet.</p>
                            <Textarea placeholder="Provide assessment justification..." />
                            <div className="flex gap-2">
                                <Button variant="brand-secondary">Mark as Not Applicable</Button>
                                <Button variant="brand-secondary">Mark as Applicable</Button>
                            </div>
                        </div>
                    )}
                </CardContent>
            </Card>

            {/* Compliance Impact */}
            <Card>
                <CardHeader>
                    <CardTitle>Compliance Impact</CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                    {vulnerability.impactedPolicies.map(policyId => {
                        const policy = compliancePolicies.find(p => p.id === policyId)
                        if (!policy) return null

                        return (
                            <div key={policyId} className="space-y-2">
                                <div className="flex items-center gap-2">
                                    <h4 className="font-semibold">{policy.name}</h4>
                                    <Badge variant="neutral">{policy.policyCode}</Badge>
                                    <a 
                                        href={policy.policyLink}
                                        target="_blank"
                                        rel="noopener noreferrer"
                                        className="text-sm text-blue-600 hover:underline"
                                        onClick={(e) => e.stopPropagation()}
                                    >
                                        View Policy
                                    </a>
                                </div>
                                <p className="text-sm text-muted-foreground">{policy.description}</p>
                                <div className="bg-muted p-3 rounded-md">
                                    <p className="text-sm font-medium">Policy Text:</p>
                                    <p className="text-sm mt-1">{policy.policyText}</p>
                                </div>
                                <div className="flex flex-wrap gap-2">
                                    {policy.frameworks.map(frameworkId => {
                                        const framework = complianceFrameworks.find(f => f.id === frameworkId)
                                        return framework && (
                                            <Badge key={frameworkId} variant="brand">
                                                {framework.name}
                                            </Badge>
                                        )
                                    })}
                                </div>
                                <div className="bg-muted p-3 rounded-md">
                                    <p className="text-sm font-medium">Business Impact:</p>
                                    <p className="text-sm mt-1">{policy.businessImpact}</p>
                                </div>
                            </div>
                        )
                    })}
                </CardContent>
            </Card>

            {/* Remediation */}
            <Card>
                <CardHeader>
                    <CardTitle>Remediation</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                    {vulnerability.remediationPlan && (
                        <div>
                            <h4 className="font-semibold mb-2">Remediation Plan</h4>
                            <p className="text-muted-foreground">{vulnerability.remediationPlan}</p>
                        </div>
                    )}
                    {vulnerability.workaround && (
                        <div>
                            <h4 className="font-semibold mb-2">Temporary Workaround</h4>
                            <p className="text-muted-foreground">{vulnerability.workaround}</p>
                        </div>
                    )}
                </CardContent>
            </Card>
        </div>
    )
} 