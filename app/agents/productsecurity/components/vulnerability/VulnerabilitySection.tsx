import { useState } from "react"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Button } from "@/subframe/components/Button"
import { Badge } from "@/subframe/components/Badge"
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetFooter } from "@/components/ui/sheet"
import { vulnerabilities, type Vulnerability } from "../../data/vulnerability-data"
import { VulnerabilityDetails } from "./VulnerabilityDetails"

export function VulnerabilitySection() {
    const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null)

    const getStatusBadgeVariant = (status: string) => {
        switch (status) {
            case 'OPEN':
                return 'error'
            case 'IN_REVIEW':
                return 'warning'
            case 'NOT_APPLICABLE':
                return 'neutral'
            case 'FIXED':
                return 'success'
            case 'ACCEPTED_RISK':
                return 'brand'
            default:
                return 'neutral'
        }
    }

    const getSeverityBadgeVariant = (severity: string) => {
        switch (severity) {
            case 'CRITICAL':
                return 'error'
            case 'HIGH':
                return 'error'
            case 'MEDIUM':
                return 'warning'
            case 'LOW':
                return 'success'
            default:
                return 'neutral'
        }
    }

    return (
        <Card className="w-full">
            <CardHeader>
                <div className="flex w-full items-center justify-between">
                    <h2 className="text-lg font-semibold">Vulnerability Assessment</h2>
                    <Button
                        variant="brand-primary"
                        icon="FeatherRefreshCw"
                        onClick={() => {}}
                    >
                        Refresh Scans
                    </Button>
                </div>
            </CardHeader>
            <CardContent>
                <div className="grid grid-cols-2 gap-4">
                    {/* Group vulnerabilities by team */}
                    {Object.entries(
                        vulnerabilities.reduce((acc, vuln) => {
                            const team = vuln.teamOwner
                            if (!acc[team]) acc[team] = []
                            acc[team].push(vuln)
                            return acc
                        }, {} as Record<string, Vulnerability[]>)
                    ).map(([team, teamVulns]) => (
                        <div key={team} className="space-y-2">
                            <h3 className="text-lg font-semibold flex items-center gap-2">
                                {team}
                            </h3>
                            <div className="grid grid-cols-1 gap-4">
                                {teamVulns.map(vuln => (
                                    <div
                                        key={vuln.id}
                                        onClick={() => setSelectedVulnerability(vuln)}
                                        className="cursor-pointer rounded-md border p-4 hover:border-brand-primary hover:bg-neutral-50 flex flex-col h-full"
                                    >
                                        <div className="flex items-center justify-between mb-2">
                                            <div className="flex items-center gap-2">
                                                <h4 className="font-semibold">{vuln.title}</h4>
                                                <Badge variant={getSeverityBadgeVariant(vuln.severity)}>
                                                    {vuln.severity}
                                                </Badge>
                                                <Badge variant={getStatusBadgeVariant(vuln.status)}>
                                                    {vuln.status.replace('_', ' ')}
                                                </Badge>
                                            </div>
                                        </div>
                                        <p className="text-sm text-muted-foreground mb-4 flex-grow">{vuln.description}</p>
                                        <div className="grid grid-cols-3 gap-4">
                                            {vuln.affectedRepository && (
                                                <div className="col-span-1">
                                                    <h4 className="text-sm font-medium mb-2">Repository</h4>
                                                    <div className="text-sm text-muted-foreground">
                                                        {vuln.affectedRepository}
                                                    </div>
                                                </div>
                                            )}
                                            {vuln.sourceTools.length > 0 && (
                                                <div className="col-span-1">
                                                    <h4 className="text-sm font-medium mb-2">Source Tools</h4>
                                                    <div className="flex flex-wrap gap-2">
                                                        {vuln.sourceTools.map(tool => (
                                                            <Badge key={tool} variant="neutral">
                                                                {tool}
                                                            </Badge>
                                                        ))}
                                                    </div>
                                                </div>
                                            )}
                                            {vuln.cveId && (
                                                <div className="col-span-1">
                                                    <h4 className="text-sm font-medium mb-2">CVE ID</h4>
                                                    <Badge variant="error" className="text-red-500">
                                                        {vuln.cveId}
                                                    </Badge>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    ))}
                </div>
            </CardContent>

            <Sheet
                open={!!selectedVulnerability}
                onOpenChange={() => setSelectedVulnerability(null)}
            >
                <SheetContent className="flex flex-col h-full w-full sm:max-w-[800px]">
                    <SheetHeader className="border-b pb-4">
                        <SheetTitle>
                            Vulnerability Details
                        </SheetTitle>
                    </SheetHeader>

                    <div className="flex-1 overflow-y-auto py-4">
                        {selectedVulnerability && (
                            <VulnerabilityDetails
                                vulnerability={selectedVulnerability}
                            />
                        )}
                    </div>

                    <SheetFooter className="border-t pt-4">
                        <div className="flex justify-end gap-2 w-full">
                            <Button variant="brand-secondary" onClick={() => setSelectedVulnerability(null)}>
                                Close
                            </Button>
                            <Button variant="brand-primary">Update Assessment</Button>
                        </div>
                    </SheetFooter>
                </SheetContent>
            </Sheet>
        </Card>
    )
} 